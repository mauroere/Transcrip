import streamlit as st
import os
import sys
import traceback
import tempfile
import json
from datetime import datetime
import uuid
import warnings
import io
import time
from pathlib import Path
import pandas as pd
from io import BytesIO
import re

# Importaci√≥n condicional de psutil (para monitoreo del sistema)
try:
    import psutil  # type: ignore
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False

warnings.filterwarnings("ignore")

# Configurar FFmpeg si est√° en directorio local
ffmpeg_local = os.path.join(os.getcwd(), 'ffmpeg', 'ffmpeg.exe')
if os.path.exists(ffmpeg_local):
    ffmpeg_dir = os.path.dirname(ffmpeg_local)
    if ffmpeg_dir not in os.environ.get('PATH', ''):
        os.environ['PATH'] = ffmpeg_dir + os.pathsep + os.environ.get('PATH', '')
    # st.sidebar.success(f"‚úì FFmpeg configurado desde: {ffmpeg_local}")
else:
    # st.sidebar.warning("‚ö†Ô∏è FFmpeg local no encontrado, usando PATH del sistema")
    pass

try:
    import whisper
    # st.sidebar.success("‚úì Whisper importado correctamente")
except ImportError as e:
    st.sidebar.error(f"‚úó Error importando Whisper: {e}")
    st.stop()

# Importaci√≥n condicional de torch para limpieza de memoria GPU
try:
    import torch
    TORCH_AVAILABLE = True
except ImportError:
    torch = None
    TORCH_AVAILABLE = False

try:
    from pydub import AudioSegment
    # st.sidebar.success("‚úì Pydub importado correctamente")
    AUDIO_PROCESSOR = "pydub"
except ImportError:
    try:
        import librosa
        import soundfile as sf
        # st.sidebar.success("‚úì Librosa importado correctamente (alternativa a Pydub)")
        AudioSegment = None
        AUDIO_PROCESSOR = "librosa"
    except ImportError as e:
        # st.sidebar.info("‚ÑπÔ∏è Sin procesador de audio adicional - Whisper maneja los formatos directamente")
        AudioSegment = None
        AUDIO_PROCESSOR = "none"

# Importaciones adicionales para detecci√≥n de interlocutores
try:
    from sklearn.cluster import KMeans
    from sklearn.preprocessing import StandardScaler
    SPEAKER_DETECTION_AVAILABLE = True
except ImportError:
    SPEAKER_DETECTION_AVAILABLE = False

try:
    import numpy as np
    NUMPY_AVAILABLE = True
except ImportError:
    NUMPY_AVAILABLE = False

# Configuraci√≥n
UPLOAD_FOLDER = 'uploads'
TRANSCRIPTIONS_FOLDER = 'transcriptions'
ALLOWED_EXTENSIONS = {'wav', 'mp3', 'mp4', 'avi', 'mov', 'flac', 'm4a', 'ogg', 'webm'}

# Crear directorios si no existen
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(TRANSCRIPTIONS_FOLDER, exist_ok=True)

# Cache del modelo Whisper
@st.cache_resource
def load_whisper_model():
    """Cargar modelo Whisper con cache y manejo robusto de errores"""
    try:
        with st.spinner("ü§ñ Inicializando sistema de transcripci√≥n..."):
            # Intentar cargar el modelo base primero
            try:
                model = whisper.load_model("base")
                # Verificar que el modelo se carg√≥ correctamente
                if model is not None:
                    return model
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Error con modelo 'base': {str(e)}")
            
            # Fallback: intentar con modelo tiny
            try:
                st.info("üîÑ Intentando con modelo alternativo...")
                model = whisper.load_model("tiny")
                if model is not None:
                    st.success("‚úÖ Modelo alternativo cargado correctamente")
                    return model
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Error con modelo 'tiny': {str(e)}")
            
            # Si ambos fallan, devolver None
            return None
            
    except Exception as e:
        st.error(f"‚ùå Error cr√≠tico al cargar modelo Whisper: {str(e)}")
        return None

def allowed_file(filename):
    """Verificar si el archivo tiene una extensi√≥n permitida"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def validate_audio_file(file_path):
    """Validar que el archivo de audio sea v√°lido"""
    try:
        # Verificar que el archivo existe
        if not os.path.exists(file_path):
            return False, f"Archivo no encontrado: {file_path}"
        
        # Verificar que no est√° vac√≠o
        try:
            file_size = os.path.getsize(file_path)
            if file_size == 0:
                return False, "El archivo est√° vac√≠o"
        except OSError as e:
            return False, f"Error al acceder al archivo: {str(e)}"
        
        # Verificaci√≥n b√°sica de extensi√≥n
        valid_extensions = ['.wav', '.mp3', '.m4a', '.aac', '.flac', '.ogg']
        file_ext = os.path.splitext(file_path)[1].lower()
        
        if file_ext in valid_extensions:
            return True, f"Archivo v√°lido: {file_size/1024/1024:.1f} MB"
        else:
            # Intentar validaci√≥n con librosa si est√° disponible
            try:
                if AUDIO_PROCESSOR == "librosa":
                    import librosa
                    y, sr = librosa.load(file_path, sr=None, duration=1.0)  # Solo cargar 1 segundo para validar
                    if len(y) > 0:
                        return True, f"Archivo de audio v√°lido: {file_size/1024/1024:.1f} MB"
                    else:
                        return False, "El archivo no contiene datos de audio v√°lidos"
                else:
                    # Si no tenemos procesador, aceptar el archivo
                    return True, f"Archivo: {file_size/1024/1024:.1f} MB"
            except Exception as audio_error:
                return False, f"Error al validar audio: {str(audio_error)}"
            
    except FileNotFoundError as e:
        return False, f"Archivo no encontrado: {str(e)}"
    except PermissionError as e:
        return False, f"Sin permisos para acceder al archivo: {str(e)}"
    except Exception as e:
        return False, f"Error al validar archivo: {str(e)}"

def convert_audio_format(input_path, output_path):
    """Convertir formato de audio usando el procesador disponible"""
    try:
        if AUDIO_PROCESSOR == "pydub" and AudioSegment:
            audio = AudioSegment.from_file(input_path)
            audio = audio.set_frame_rate(16000).set_channels(1)
            audio.export(output_path, format="wav")
            return True, None
        elif AUDIO_PROCESSOR == "librosa":
            import librosa
            import soundfile as sf
            # Cargar audio
            y, sr = librosa.load(input_path, sr=16000, mono=True)
            # Guardar como WAV
            sf.write(output_path, y, sr)
            return True, None
        else:
            return False, "No hay procesador de audio disponible para conversi√≥n"
    except Exception as e:
        return False, f"Error en conversi√≥n: {str(e)}"

def enhance_audio_quality(file_path):
    """Mejorar calidad de audio para mejor transcripci√≥n"""
    try:
        if AUDIO_PROCESSOR == "librosa":
            import librosa
            import soundfile as sf
            import numpy as np
            
            # Cargar audio
            y, sr = librosa.load(file_path, sr=None, mono=False)
            
            # Convertir a mono si es est√©reo
            if y.ndim > 1:
                y = librosa.to_mono(y)
            
            # Normalizar audio
            y = librosa.util.normalize(y)
            
            # Reducir ruido (filtro pasa-altos simple)
            y = librosa.effects.preemphasis(y)
            
            # Resamplear a 16kHz (√≥ptimo para Whisper)
            if sr != 16000:
                y = librosa.resample(y, orig_sr=sr, target_sr=16000)
                sr = 16000
            
            # Guardar archivo mejorado
            enhanced_path = file_path.replace('.wav', '_enhanced.wav')
            sf.write(enhanced_path, y, sr)
            
            return enhanced_path, None
        else:
            return file_path, None  # Sin mejora si no hay librosa
    except Exception as e:
        return file_path, f"Error mejorando audio: {str(e)}"

def extract_speaker_features(audio_path, segment_duration=2.0):
    """Extraer caracter√≠sticas de voz para detecci√≥n de interlocutores"""
    try:
        if not AUDIO_PROCESSOR == "librosa" or not NUMPY_AVAILABLE:
            return None, "Librer√≠as requeridas no disponibles para detecci√≥n de speakers"
        
        import librosa
        import numpy as np
        
        # Cargar audio
        y, sr = librosa.load(audio_path, sr=16000, mono=True)
        
        # Calcular duraci√≥n total
        total_duration = len(y) / sr
        
        # Crear segmentos para an√°lisis
        segment_samples = int(segment_duration * sr)
        features = []
        timestamps = []
        
        for start in range(0, len(y), segment_samples):
            end = min(start + segment_samples, len(y))
            segment = y[start:end]
            
            # Saltar segmentos muy cortos o silenciosos
            if len(segment) < sr * 0.5:  # Menos de 0.5 segundos
                continue
            
            # Calcular energ√≠a del segmento
            energy = np.sum(segment ** 2)
            if energy < np.percentile(np.sum(np.square(np.split(y, min(100, len(y)//1000))), axis=1), 20):
                continue  # Saltar segmentos silenciosos
            
            # Extraer caracter√≠sticas de voz
            segment_features = []
            
            # 1. Frecuencia fundamental (pitch)
            try:
                pitches, magnitudes = librosa.piptrack(y=segment, sr=sr, threshold=0.1)
                pitch_values = []
                for t in range(pitches.shape[1]):
                    index = magnitudes[:, t].argmax()
                    pitch = pitches[index, t]
                    if pitch > 0:
                        pitch_values.append(pitch)
                
                if pitch_values:
                    avg_pitch = np.mean(pitch_values)
                    pitch_std = np.std(pitch_values)
                else:
                    avg_pitch = 0
                    pitch_std = 0
                
                segment_features.extend([avg_pitch, pitch_std])
            except:
                segment_features.extend([0, 0])
            
            # 2. Coeficientes MFCC (caracter√≠sticas espectrales)
            try:
                mfccs = librosa.feature.mfcc(y=segment, sr=sr, n_mfcc=13)
                mfcc_means = np.mean(mfccs, axis=1)
                mfcc_stds = np.std(mfccs, axis=1)
                segment_features.extend(mfcc_means.tolist())
                segment_features.extend(mfcc_stds.tolist())
            except:
                segment_features.extend([0] * 26)  # 13 means + 13 stds
            
            # 3. Caracter√≠sticas espectrales adicionales
            try:
                # Centroide espectral
                spectral_centroids = librosa.feature.spectral_centroid(y=segment, sr=sr)
                spectral_centroid_mean = np.mean(spectral_centroids)
                
                # Rolloff espectral
                spectral_rolloff = librosa.feature.spectral_rolloff(y=segment, sr=sr)
                spectral_rolloff_mean = np.mean(spectral_rolloff)
                
                # Zero crossing rate
                zcr = librosa.feature.zero_crossing_rate(segment)
                zcr_mean = np.mean(zcr)
                
                segment_features.extend([spectral_centroid_mean, spectral_rolloff_mean, zcr_mean])
            except:
                segment_features.extend([0, 0, 0])
            
            # 4. Energ√≠a y volumen
            rms_energy = np.sqrt(np.mean(segment ** 2))
            segment_features.append(rms_energy)
            
            features.append(segment_features)
            timestamps.append(start / sr)  # Timestamp en segundos
        
        return np.array(features), timestamps
        
    except Exception as e:
        return None, f"Error extrayendo caracter√≠sticas: {str(e)}"

def detect_speakers(features, n_speakers=2, min_speakers=2, max_speakers=4):
    """Detectar interlocutores usando clustering de caracter√≠sticas de voz"""
    try:
        if not SPEAKER_DETECTION_AVAILABLE or features is None:
            return None, "Detecci√≥n de speakers no disponible"
        
        from sklearn.cluster import KMeans
        from sklearn.preprocessing import StandardScaler
        import numpy as np
        
        # Normalizar caracter√≠sticas
        scaler = StandardScaler()
        features_scaled = scaler.fit_transform(features)
        
        # Determinar n√∫mero √≥ptimo de speakers
        best_score = -1
        best_labels = None
        best_n_speakers = n_speakers
        
        # Probar diferentes n√∫meros de speakers
        for n in range(min_speakers, max_speakers + 1):
            if len(features) < n:
                continue
            
            kmeans = KMeans(n_clusters=n, random_state=42, n_init=10)
            labels = kmeans.fit_predict(features_scaled)
            
            # Calcular score de silhouette como m√©trica de calidad
            try:
                from sklearn.metrics import silhouette_score
                score = silhouette_score(features_scaled, labels)
                
                if score > best_score:
                    best_score = score
                    best_labels = labels
                    best_n_speakers = n
            except:
                # Si no est√° disponible silhouette_score, usar el n√∫mero por defecto
                if n == n_speakers:
                    best_labels = labels
                    best_n_speakers = n
                    break
        
        return best_labels, best_n_speakers
        
    except Exception as e:
        return None, f"Error en detecci√≥n de speakers: {str(e)}"

def format_dialogue_transcription(text, speaker_labels, timestamps, speaker_names=None):
    """Formatear transcripci√≥n como di√°logo con interlocutores identificados"""
    try:
        if speaker_labels is None or not timestamps:
            return text, "Formato de di√°logo no disponible"
        
        # Dividir texto en oraciones aproximadas
        sentences = []
        current_sentence = ""
        
        words = text.split()
        words_per_segment = max(1, len(words) // len(speaker_labels))
        
        # Asignar palabras a segmentos
        dialogue_segments = []
        word_idx = 0
        
        for i, (speaker, timestamp) in enumerate(zip(speaker_labels, timestamps)):
            # Calcular palabras para este segmento
            if i == len(speaker_labels) - 1:  # √öltimo segmento
                segment_words = words[word_idx:]
            else:
                end_word = min(word_idx + words_per_segment, len(words))
                segment_words = words[word_idx:end_word]
                word_idx = end_word
            
            if segment_words:
                segment_text = " ".join(segment_words)
                dialogue_segments.append({
                    'speaker': speaker,
                    'text': segment_text,
                    'timestamp': timestamp
                })
        
        # Agrupar segmentos consecutivos del mismo speaker
        merged_dialogue = []
        current_speaker = None
        current_text = ""
        current_timestamp = 0
        
        for segment in dialogue_segments:
            if segment['speaker'] != current_speaker:
                # Cambio de speaker
                if current_speaker is not None and current_text.strip():
                    merged_dialogue.append({
                        'speaker': current_speaker,
                        'text': current_text.strip(),
                        'timestamp': current_timestamp
                    })
                
                current_speaker = segment['speaker']
                current_text = segment['text']
                current_timestamp = segment['timestamp']
            else:
                # Mismo speaker, concatenar texto
                current_text += " " + segment['text']
        
        # Agregar √∫ltimo segmento
        if current_text.strip():
            merged_dialogue.append({
                'speaker': current_speaker,
                'text': current_text.strip(),
                'timestamp': current_timestamp
            })
        
        # Formatear como di√°logo
        formatted_dialogue = []
        
        # Determinar nombres de speakers
        if speaker_names is None:
            unique_speakers = sorted(list(set(speaker_labels)))
            speaker_names = {}
            
            # Asignar nombres basados en patrones t√≠picos de call center
            for i, speaker_id in enumerate(unique_speakers):
                if i == 0:
                    # Primer speaker - probablemente el asesor
                    speaker_names[speaker_id] = "üéß ASESOR"
                elif i == 1:
                    # Segundo speaker - probablemente el cliente
                    speaker_names[speaker_id] = "üë§ CLIENTE"
                else:
                    # Speakers adicionales
                    speaker_names[speaker_id] = f"üë• INTERLOCUTOR {i}"
        
        # Generar di√°logo formateado
        for segment in merged_dialogue:
            speaker_name = speaker_names.get(segment['speaker'], f"SPEAKER {segment['speaker']}")
            timestamp_formatted = f"{int(segment['timestamp']//60):02d}:{int(segment['timestamp']%60):02d}"
            
            formatted_dialogue.append(f"[{timestamp_formatted}] {speaker_name}: {segment['text']}")
        
        dialogue_text = "\n\n".join(formatted_dialogue)
        
        # Estad√≠sticas del di√°logo
        stats = {
            'total_speakers': len(set(speaker_labels)),
            'total_segments': len(merged_dialogue),
            'speaker_distribution': {}
        }
        
        for speaker_id in set(speaker_labels):
            speaker_name = speaker_names.get(speaker_id, f"SPEAKER {speaker_id}")
            speaker_segments = [s for s in merged_dialogue if s['speaker'] == speaker_id]
            total_words = sum(len(s['text'].split()) for s in speaker_segments)
            stats['speaker_distribution'][speaker_name] = {
                'segments': len(speaker_segments),
                'words': total_words,
                'percentage': round((total_words / len(text.split())) * 100, 1)
            }
        
        return dialogue_text, stats
        
    except Exception as e:
        return text, f"Error formateando di√°logo: {str(e)}"

def analyze_conversation_dynamics(dialogue_stats):
    """Analizar din√°micas de conversaci√≥n entre interlocutores"""
    try:
        if not isinstance(dialogue_stats, dict) or 'speaker_distribution' not in dialogue_stats:
            return {}
        
        analysis = {
            'conversation_type': 'unknown',
            'dominance_pattern': 'balanced',
            'interaction_quality': 'normal',
            'recommendations': []
        }
        
        speaker_dist = dialogue_stats['speaker_distribution']
        
        # Identificar tipo de conversaci√≥n
        if len(speaker_dist) == 2:
            speakers = list(speaker_dist.keys())
            asesor_key = next((k for k in speakers if 'ASESOR' in k), speakers[0])
            cliente_key = next((k for k in speakers if 'CLIENTE' in k), speakers[1])
            
            asesor_percentage = speaker_dist[asesor_key]['percentage']
            cliente_percentage = speaker_dist[cliente_key]['percentage']
            
            # Determinar patr√≥n de dominancia
            if asesor_percentage > 70:
                analysis['dominance_pattern'] = 'asesor_dominante'
                analysis['recommendations'].append("El asesor habla demasiado. Deber√≠a dar m√°s espacio al cliente para expresarse.")
            elif cliente_percentage > 70:
                analysis['dominance_pattern'] = 'cliente_dominante'
                analysis['recommendations'].append("El cliente habla mucho. El asesor deber√≠a ser m√°s proactivo en guiar la conversaci√≥n.")
            elif abs(asesor_percentage - cliente_percentage) < 20:
                analysis['dominance_pattern'] = 'balanceado'
            
            # Determinar tipo de conversaci√≥n
            if asesor_percentage > 60:
                analysis['conversation_type'] = 'asesor_explicativo'
            elif cliente_percentage > 60:
                analysis['conversation_type'] = 'cliente_consultivo'
            else:
                analysis['conversation_type'] = 'colaborativo'
            
            # Analizar calidad de interacci√≥n basada en n√∫mero de segmentos
            total_segments = dialogue_stats['total_segments']
            if total_segments < 4:
                analysis['interaction_quality'] = 'limitada'
                analysis['recommendations'].append("Conversaci√≥n muy corta. Considerar si se resolvi√≥ adecuadamente la consulta.")
            elif total_segments > 20:
                analysis['interaction_quality'] = 'extensa'
                analysis['recommendations'].append("Conversaci√≥n muy larga. Evaluar eficiencia en la resoluci√≥n.")
            else:
                analysis['interaction_quality'] = 'adecuada'
        
        return analysis
        
    except Exception as e:
        return {'error': f"Error analizando din√°micas: {str(e)}"}

def transcribe_with_speaker_detection(model, file_path):
    """Transcripci√≥n con detecci√≥n de interlocutores integrada"""
    try:
        # Primero hacer la transcripci√≥n normal
        transcription, error = transcribe_with_enhanced_quality(model, file_path)
        
        if error or not transcription:
            return None, error, None, None
        
        # Si est√° disponible, agregar detecci√≥n de speakers
        if SPEAKER_DETECTION_AVAILABLE and AUDIO_PROCESSOR == "librosa":
            
            st.info("üé≠ Analizando interlocutores en el audio...")
            
            # Extraer caracter√≠sticas de voz
            features, timestamps = extract_speaker_features(file_path)
            
            if features is not None:
                # Detectar speakers
                speaker_labels, n_speakers = detect_speakers(features)
                
                if speaker_labels is not None:
                    st.success(f"‚úÖ {n_speakers} interlocutores detectados")
                    
                    # Formatear como di√°logo
                    dialogue_text, dialogue_stats = format_dialogue_transcription(
                        transcription, speaker_labels, timestamps
                    )
                    
                    # Analizar din√°micas de conversaci√≥n
                    conversation_analysis = analyze_conversation_dynamics(dialogue_stats)
                    
                    return transcription, dialogue_text, dialogue_stats, conversation_analysis
                else:
                    st.warning("‚ö†Ô∏è No se pudieron detectar interlocutores claramente")
            else:
                st.warning("‚ö†Ô∏è No se pudieron extraer caracter√≠sticas de voz para detecci√≥n de speakers")
        
        # Si no est√° disponible la detecci√≥n, devolver solo transcripci√≥n normal
        return transcription, None, None, None
        
    except Exception as e:
        return None, f"Error en transcripci√≥n con detecci√≥n de speakers: {str(e)}", None, None

def clean_transcription_text(text):
    """Limpiar y profesionalizar el texto transcrito"""
    if not text:
        return text
    
    # Diccionario de correcciones espec√≠ficas para call center
    corrections = {
        # Saludos comunes
        r'\bbuen[ao]s? d[i√≠]as?\b': 'buenos d√≠as',
        r'\bbuen[ao]s? tard[e√©]s?\b': 'buenas tardes',
        r'\bbuen[ao]s? noch[e√©]s?\b': 'buenas noches',
        
        # Empresa y servicios
        r'\bmov[i√≠]star\b': 'Movistar',
        r'\bfactur[ao]?\b': 'factura',
        r'\bl[i√≠]ne[ao]?\b': 'l√≠nea',
        r'\bservici[eo]s?\b': 'servicio',
        r'\binter?net\b': 'internet',
        r'\btelev[i√≠]si[√≥o]n?\b': 'televisi√≥n',
        r'\bplan[e√©]s?\b': 'plan',
        
        # Palabras comunes mal transcritas
        r'\bgracias?\b': 'gracias',
        r'\bdiscul[pq][ae]?\b': 'disculpe',
        r'\bperd[√≥o]n?\b': 'perd√≥n',
        r'\bproblemas?\b': 'problema',
        r'\bsoluci[√≥o]n?\b': 'soluci√≥n',
        r'\brespuest[ao]?\b': 'respuesta',
        r'\bmom[e√©]nto?\b': 'momento',
        
        # N√∫meros mal transcritos
        r'\bun[oa]?\b': 'uno',
        r'\bdos?\b': 'dos',
        r'\btr[e√©]s?\b': 'tres',
        r'\bcuatro?\b': 'cuatro',
        r'\bcinco?\b': 'cinco',
        
        # Expresiones comunes
        r'\b[¬øc][√≥o]m[eo]?\s+est[√°a]?\b': 'c√≥mo est√°',
        r'\ben\s+qu[e√©]\s+pued[eo]\s+ayud[ao]r?\b': 'en qu√© puedo ayudar',
        r'\bpor\s+favor\b': 'por favor',
        r'\bmuch[ao]s?\s+gracias?\b': 'muchas gracias',
    }
    
    # Aplicar correcciones con regex
    cleaned_text = text.lower()
    for pattern, replacement in corrections.items():
        cleaned_text = re.sub(pattern, replacement, cleaned_text, flags=re.IGNORECASE)
    
    # Limpiar s√≠mbolos y caracteres problem√°ticos
    cleaned_text = re.sub(r'[‚ô™‚ô´‚ô™]', '', cleaned_text)  # Remover s√≠mbolos musicales
    cleaned_text = re.sub(r'\s*\[.*?\]\s*', ' ', cleaned_text)  # Remover [texto entre corchetes]
    cleaned_text = re.sub(r'\s*\(.*?\)\s*', ' ', cleaned_text)  # Remover (texto entre par√©ntesis) largo
    cleaned_text = re.sub(r'[^\w\s√°√©√≠√≥√∫√º√±¬ø¬°.,!?:-]', '', cleaned_text)  # Solo caracteres v√°lidos
    
    # Normalizar espacios y puntuaci√≥n
    cleaned_text = re.sub(r'\s+', ' ', cleaned_text)  # Espacios m√∫ltiples
    cleaned_text = re.sub(r'\s*([.!?])\s*', r'\1 ', cleaned_text)  # Espacios alrededor de puntuaci√≥n
    cleaned_text = re.sub(r'([.!?])\s*([.!?])', r'\1', cleaned_text)  # Puntuaci√≥n duplicada
    
    # Capitalizar apropiadamente
    sentences = re.split(r'([.!?]+)', cleaned_text)
    capitalized_sentences = []
    
    for i, sentence in enumerate(sentences):
        if i % 2 == 0:  # Texto (no puntuaci√≥n)
            sentence = sentence.strip()
            if sentence:
                # Capitalizar primera letra de cada oraci√≥n
                sentence = sentence[0].upper() + sentence[1:] if len(sentence) > 1 else sentence.upper()
                
                # Capitalizar despu√©s de signos espec√≠ficos
                sentence = re.sub(r'([.!?]\s+)([a-z])', 
                                lambda m: m.group(1) + m.group(2).upper(), sentence)
                
                # Capitalizar nombres propios conocidos
                sentence = re.sub(r'\bmovistar\b', 'Movistar', sentence, flags=re.IGNORECASE)
                
        capitalized_sentences.append(sentence)
    
    # Unir y limpiar espacios finales
    final_text = ''.join(capitalized_sentences).strip()
    
    return final_text

def transcribe_with_enhanced_quality(model, file_path):
    """Transcripci√≥n mejorada con manejo espec√≠fico de errores de tensor y m√∫ltiples estrategias de recuperaci√≥n"""
    try:
        # Verificar archivo
        if not os.path.exists(file_path):
            return None, f"Archivo no existe para transcripci√≥n: {file_path}"
        
        # Verificar tama√±o del archivo
        file_size = os.path.getsize(file_path)
        if file_size == 0:
            return None, "El archivo est√° vac√≠o"
        
        # Estrategias de procesamiento optimizadas para errores de tensor
        processing_strategies = [
            {
                "name": "Configuraci√≥n Ultra-B√°sica Anti-Tensor",
                "use_enhanced": False,
                "configs": [
                    {"language": "es", "fp16": False, "task": "transcribe", "no_speech_threshold": 0.6},
                    {"language": "es", "fp16": False, "task": "transcribe"},
                    {"language": "es", "fp16": False},
                    {"language": "es"},
                    {}  # Configuraci√≥n completamente vac√≠a
                ]
            },
            {
                "name": "Audio Simplificado + Config M√≠nima",
                "use_enhanced": True,
                "configs": [
                    {"language": "es", "fp16": False},
                    {"language": "es"},
                    {}
                ]
            },
            {
                "name": "Procesamiento por Segmentos Peque√±os",
                "use_enhanced": False,
                "configs": [{"language": "es", "fp16": False}],
                "segment_audio": True,
                "segment_size": 15  # Segmentos m√°s peque√±os
            },
            {
                "name": "Estrategia Extrema - Micro Segmentos",
                "use_enhanced": False,
                "configs": [{}],
                "segment_audio": True,
                "segment_size": 5  # Segmentos muy peque√±os
            },
            {
                "name": "Fallback Completo - Sin Configuraci√≥n",
                "use_enhanced": False,
                "configs": [{}],
                "raw_processing": True
            }
        ]
        
        last_error = None
        
        for strategy_idx, strategy in enumerate(processing_strategies):
            try:
                # Determinar qu√© archivo usar
                if strategy["use_enhanced"]:
                    enhanced_path, enhance_error = enhance_audio_quality(file_path)
                    if enhance_error:
                        continue  # Saltar esta estrategia si falla la mejora
                    target_path = enhanced_path
                else:
                    target_path = file_path
                
                # Mostrar progreso de estrategia
                if strategy_idx > 0:
                    st.warning(f"üîÑ Estrategia {strategy_idx + 1}: {strategy['name']}")
                
                # Procesamiento especial para segmentaci√≥n
                if strategy.get("segment_audio", False):
                    segment_size = strategy.get("segment_size", 30)  # Tama√±o configurable
                    result_text = process_audio_segments(model, target_path, strategy["configs"][0], segment_size)
                    if result_text:
                        return clean_transcription_text(result_text), None
                    else:
                        last_error = f"Estrategia {strategy_idx + 1}: Segmentaci√≥n fall√≥"
                        continue
                
                # Procesamiento raw sin configuraciones especiales
                if strategy.get("raw_processing", False):
                    try:
                        # Limpieza extrema de memoria
                        import gc
                        gc.collect()
                        if TORCH_AVAILABLE and torch.cuda.is_available():
                            torch.cuda.empty_cache()
                        
                        # Transcripci√≥n completamente b√°sica
                        result = model.transcribe(target_path)
                        raw_text = result.get("text", "")
                        
                        if raw_text and raw_text.strip():
                            cleaned_text = clean_transcription_text(raw_text)
                            st.success(f"‚úÖ Transcripci√≥n exitosa con {strategy['name']} (modo raw)")
                            return cleaned_text, None
                            
                    except Exception as e:
                        last_error = f"Estrategia {strategy_idx + 1}: Raw processing fall√≥ - {str(e)}"
                        continue
                
                # Probar configuraciones normales
                for config_idx, config in enumerate(strategy["configs"]):
                    try:
                        # Limpiar memoria antes de cada intento
                        import gc
                        gc.collect()
                        
                        # Mensaje espec√≠fico para errores de tensor
                        if "tensor" in str(last_error).lower() and config_idx == 0:
                            st.info("üß† Aplicando soluci√≥n para compatibilidad de tensores...")
                        
                        result = model.transcribe(target_path, **config)
                        raw_text = result.get("text", "")
                        
                        if raw_text and raw_text.strip():
                            # Limpiar archivo temporal si se cre√≥
                            if strategy["use_enhanced"] and target_path != file_path and os.path.exists(target_path):
                                try:
                                    os.unlink(target_path)
                                except:
                                    pass
                            
                            cleaned_text = clean_transcription_text(raw_text)
                            st.success(f"‚úÖ Transcripci√≥n exitosa con {strategy['name']}")
                            return cleaned_text, None
                        else:
                            last_error = f"Estrategia {strategy_idx + 1}, Config {config_idx + 1}: Texto vac√≠o"
                            continue
                            
                    except Exception as e:
                        error_msg = str(e)
                        last_error = f"Estrategia {strategy_idx + 1}, Config {config_idx + 1}: {error_msg}"
                        
                        # Manejo espec√≠fico de errores de tensor
                        if "tensor" in error_msg.lower() and ("size" in error_msg.lower() or "dimension" in error_msg.lower()):
                            st.warning(f"‚ö†Ô∏è Error de tensor detectado en configuraci√≥n {config_idx + 1}")
                            
                            # Informaci√≥n espec√≠fica del error
                            if "Expected size 5 but got size 1" in error_msg:
                                st.info("üîç **Error espec√≠fico**: Incompatibilidad de dimensiones de tensor (5 vs 1)")
                                st.info("üí° **Aplicando correcci√≥n**: Simplificando configuraci√≥n y limpiando memoria")
                            
                            # Forzar limpieza agresiva de memoria
                            try:
                                import gc
                                gc.collect()
                                if TORCH_AVAILABLE and torch.cuda.is_available():
                                    torch.cuda.empty_cache()
                                    torch.cuda.synchronize()
                                
                                # Pausa breve para que el sistema se estabilice
                                import time
                                time.sleep(0.5)
                            except Exception as cleanup_error:
                                pass
                            
                            # Si es el √∫ltimo config de la estrategia actual, mostrar consejo
                            if config_idx == len(strategy["configs"]) - 1:
                                st.warning("üîß **Pr√≥ximo paso**: Intentando con procesamiento por segmentos")
                            
                            continue
                        
                        # Para otros errores espec√≠ficos
                        elif "out of memory" in error_msg.lower() or "memory" in error_msg.lower():
                            st.warning(f"‚ö†Ô∏è Error de memoria detectado en configuraci√≥n {config_idx + 1}")
                            # Limpieza espec√≠fica para memoria
                            try:
                                import gc
                                gc.collect()
                                if TORCH_AVAILABLE and torch.cuda.is_available():
                                    torch.cuda.empty_cache()
                            except:
                                pass
                            continue
                        
                        # Para otros errores, continuar con siguiente configuraci√≥n
                        continue
                
                # Limpiar archivo temporal de esta estrategia
                if strategy["use_enhanced"] and target_path != file_path and os.path.exists(target_path):
                    try:
                        os.unlink(target_path)
                    except:
                        pass
                        
            except Exception as e:
                last_error = f"Estrategia {strategy_idx + 1}: {str(e)}"
                continue
        
        # Si llegamos aqu√≠, todas las estrategias fallaron
        error_info = f"Error en todas las configuraciones de transcripci√≥n. √öltimo error: {last_error}"
        
        # An√°lisis del error para dar sugerencias espec√≠ficas
        if last_error and "tensor" in last_error.lower():
            st.error("‚ùå **Error Persistente de Tensor Detectado**")
            st.warning("""
            üîß **Sugerencias para resolver este problema**:
            
            1. **Convierte el archivo** usando FFmpeg:
               ```
               ffmpeg -i "tu_archivo.wav" -ar 16000 -ac 1 -c:a pcm_s16le "archivo_fixed.wav"
               ```
            
            2. **Divide el archivo** en partes m√°s peque√±as:
               ```
               ffmpeg -i "tu_archivo.wav" -f segment -segment_time 300 -ar 16000 -ac 1 "parte_%03d.wav"
               ```
            
            3. **Usa software como Audacity** para re-exportar el audio en formato m√°s simple
            
            4. **Reduce la calidad** del audio (16kHz, mono, 16-bit)
            """)
        
        return None, error_info
        
    except Exception as e:
        return None, f"Error cr√≠tico en transcripci√≥n: {str(e)}"

def process_audio_segments(model, file_path, config, segment_duration=30):
    """Procesar audio en segmentos para evitar errores de tensor en archivos largos"""
    try:
        import librosa
        import soundfile as sf
        import tempfile
        
        # Cargar audio completo
        y, sr = librosa.load(file_path, sr=16000, mono=True)
        
        # Calcular duraci√≥n
        duration = len(y) / sr
        
        # Si es muy corto, procesar normalmente
        if duration < segment_duration / 2:
            return None
        
        # Dividir en segmentos del tama√±o especificado con overlap de 2 segundos
        segment_length = segment_duration * sr
        overlap = min(2 * sr, segment_length // 4)  # Overlap m√≠nimo para segmentos peque√±os
        step = segment_length - overlap
        
        segments_text = []
        
        # Mostrar progreso de segmentaci√≥n
        st.info(f"üîÑ Procesando audio en segmentos de {segment_duration} segundos...")
        
        segment_count = 0
        for start in range(0, len(y), step):
            end = min(start + segment_length, len(y))
            segment = y[start:end]
            
            # Saltar segmentos muy cortos
            if len(segment) < sr * 0.5:  # Menos de 0.5 segundos
                continue
            
            segment_count += 1
            
            # Guardar segmento temporal
            with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as tmp_file:
                sf.write(tmp_file.name, segment, sr)
                tmp_path = tmp_file.name
            
            try:
                # Mostrar progreso del segmento
                if segment_count % 5 == 0:  # Cada 5 segmentos
                    st.info(f"üìù Procesando segmento {segment_count}...")
                
                # Limpieza de memoria antes de cada segmento
                import gc
                gc.collect()
                
                # Transcribir segmento con configuraci√≥n muy b√°sica para evitar tensor errors
                basic_config = {"language": "es", "fp16": False} if config else {}
                result = model.transcribe(tmp_path, **basic_config)
                segment_text = result.get("text", "").strip()
                
                if segment_text:
                    segments_text.append(segment_text)
                    
            except Exception as e:
                # Si falla un segmento, intentar con configuraci√≥n a√∫n m√°s b√°sica
                try:
                    result = model.transcribe(tmp_path)
                    segment_text = result.get("text", "").strip()
                    if segment_text:
                        segments_text.append(segment_text)
                except:
                    # Si falla completamente, continuar con el siguiente
                    pass
            finally:
                # Limpiar archivo temporal
                try:
                    os.unlink(tmp_path)
                except:
                    pass
        
        # Unir todos los segmentos
        if segments_text:
            final_text = " ".join(segments_text)
            st.success(f"‚úÖ {segment_count} segmentos procesados exitosamente")
            return final_text
        else:
            return None
            
    except Exception as e:
        st.error(f"‚ùå Error en procesamiento por segmentos: {str(e)}")
        return None

def transcribe_with_fallback(model, file_path):
    """Mantener compatibilidad - usar nueva funci√≥n mejorada"""
    return transcribe_with_enhanced_quality(model, file_path)

def analyze_transcription(text):
    """An√°lisis completo de la transcripci√≥n con evaluaci√≥n de performance"""
    # M√©tricas b√°sicas
    word_count = len(text.split())
    character_count = len(text)
    estimated_duration = word_count / 150  # ~150 palabras por minuto

    # An√°lisis de palabras clave espec√≠ficas
    keywords = {
        "saludos": count_keywords(text, ["hola", "buenos d√≠as", "buenas tardes", "buenas noches", "bienvenido"]),
        "agradecimientos": count_keywords(text, ["gracias", "agradezco", "muchas gracias", "te agradezco"]),
        "disculpas": count_keywords(text, ["disculpa", "perd√≥n", "lo siento", "disculpe", "perdone"]),
        "servicios_movistar": count_keywords(text, ["movistar", "plan", "servicio", "factura", "l√≠nea", "internet", "m√≥vil"]),
        "problemas_tecnicos": count_keywords(text, ["problema", "error", "falla", "no funciona", "ca√≠do", "lento"])
    }

    # An√°lisis de sentimiento b√°sico
    sentiment_indicators = {
        "positive": count_keywords(text, ["excelente", "perfecto", "genial", "bien", "bueno", "contento", "satisfecho"]),
        "negative": count_keywords(text, ["mal", "terrible", "horrible", "molesto", "enojado", "frustrado", "problema"])
    }

    # AN√ÅLISIS AVANZADO DE PERFORMANCE
    performance = analyze_performance(text)

    return {
        "word_count": word_count,
        "character_count": character_count,
        "estimated_duration": estimated_duration,
        "keywords": keywords,
        "sentiment_indicators": sentiment_indicators,
        "performance": performance
    }

def analyze_performance(text):
    """An√°lisis completo de performance del asesor"""
    text_lower = text.lower()
    
    # 1. AN√ÅLISIS DE PROTOCOLO
    protocol_analysis = {
        "saludo_inicial": any(saludo in text_lower for saludo in [
            "hola", "buenos d√≠as", "buenas tardes", "buenas noches", 
            "bienvenido", "gracias por contactar", "habla con"
        ]),
        "identificacion": any(id_phrase in text_lower for id_phrase in [
            "su nombre", "me puede dar", "necesito sus datos", "podr√≠a confirmar",
            "su n√∫mero de documento", "su dni", "su identificaci√≥n"
        ]),
        "pregunta_ayuda": any(ayuda in text_lower for ayuda in [
            "en qu√© puedo ayudar", "c√≥mo puedo ayudar", "cu√°l es su consulta",
            "qu√© necesita", "en qu√© le puedo asistir", "motivo de su llamada"
        ]),
        "despedida": any(despedida in text_lower for despedida in [
            "que tenga buen d√≠a", "gracias por contactar", "hasta luego",
            "que est√© bien", "nos vemos", "chau", "adi√≥s"
        ])
    }
    
    # Calcular score de protocolo
    protocol_score = (sum(protocol_analysis.values()) / len(protocol_analysis)) * 100

    # 2. AN√ÅLISIS DE TONO
    tone_indicators = {
        "amable": count_keywords(text, ["por favor", "con gusto", "encantado", "perfecto", "claro que s√≠"]),
        "empatico": count_keywords(text, ["entiendo", "comprendo", "me imagino", "tiene raz√≥n", "lo siento"]),
        "profesional": count_keywords(text, ["se√±or", "se√±ora", "usted", "perm√≠tame", "procedemos"]),
        "cortado": count_keywords(text, ["s√≠", "no", "ok", "bien"]) - count_keywords(text, ["s√≠ se√±or", "claro que s√≠"]),
        "frustrado": count_keywords(text, ["pero", "sin embargo", "es que", "ya le dije", "otra vez"]),
        "agresivo": count_keywords(text, ["no puede", "imposible", "no se puede", "tiene que"])
    }
    
    # Determinar tono principal
    primary_tone = max(tone_indicators.keys(), key=lambda k: tone_indicators[k])
    if tone_indicators[primary_tone] == 0:
        primary_tone = "neutral"
    
    # Score de tono (positivo vs negativo)
    positive_indicators = tone_indicators["amable"] + tone_indicators["empatico"] + tone_indicators["profesional"]
    negative_indicators = tone_indicators["cortado"] + tone_indicators["frustrado"] + tone_indicators["agresivo"]
    
    if positive_indicators + negative_indicators > 0:
        tone_score = (positive_indicators / (positive_indicators + negative_indicators)) * 100
    else:
        tone_score = 50  # Neutral si no hay indicadores

    # 3. AN√ÅLISIS DE RESOLUCI√ìN DE PROBLEMAS
    resolution_indicators = {
        "solucion_ofrecida": any(sol in text_lower for sol in [
            "vamos a solucionar", "le voy a ayudar", "podemos hacer", "voy a verificar",
            "le ofrezco", "una opci√≥n es", "podr√≠a", "vamos a revisar"
        ]),
        "seguimiento": any(seg in text_lower for seg in [
            "le voy a llamar", "estaremos en contacto", "le env√≠o", "quedamos en",
            "voy a hacer el seguimiento", "en las pr√≥ximas horas"
        ]),
        "confirmacion": any(conf in text_lower for conf in [
            "qued√≥ claro", "est√° de acuerdo", "confirma", "est√° bien",
            "entendi√≥", "alguna duda", "algo m√°s"
        ])
    }
    
    problem_resolved = any(res in text_lower for res in [
        "solucionado", "resuelto", "listo", "perfecto", "ya est√°",
        "problema resuelto", "ya funciona"
    ])
    
    follow_up_needed = any(follow in text_lower for follow in [
        "voy a verificar", "le confirmo", "estaremos pendientes",
        "en 24 horas", "ma√±ana", "pr√≥ximamente"
    ])
    
    # Determinar tipo de problema
    problem_type = "otro"
    if any(tech in text_lower for tech in ["internet", "wifi", "conexi√≥n", "se√±al"]):
        problem_type = "t√©cnico"
    elif any(bill in text_lower for bill in ["factura", "cobro", "pago", "dinero"]):
        problem_type = "facturaci√≥n"
    elif any(plan in text_lower for plan in ["plan", "cambio", "upgrade", "servicio"]):
        problem_type = "comercial"
    
    resolution_score = (sum(resolution_indicators.values()) / len(resolution_indicators)) * 100
    if problem_resolved:
        resolution_score = min(resolution_score + 30, 100)

    # 4. DETECCI√ìN DE FALENCIAS
    falencias = []
    
    if not protocol_analysis["saludo_inicial"]:
        falencias.append("No realiz√≥ saludo inicial apropiado")
    if not protocol_analysis["identificacion"]:
        falencias.append("No solicit√≥ identificaci√≥n del cliente")
    if not protocol_analysis["pregunta_ayuda"]:
        falencias.append("No pregunt√≥ espec√≠ficamente c√≥mo ayudar")
    if tone_indicators["cortado"] > 3:
        falencias.append("Tono muy cortante o seco en las respuestas")
    if tone_indicators["frustrado"] > 2:
        falencias.append("Mostr√≥ signos de frustraci√≥n")
    if not resolution_indicators["confirmacion"]:
        falencias.append("No confirm√≥ la comprensi√≥n del cliente")
    if not problem_resolved and not follow_up_needed:
        falencias.append("No ofreci√≥ soluci√≥n ni seguimiento al problema")

    # 5. PUNTOS DE MEJORA
    puntos_mejora = []
    
    if protocol_score < 75:
        puntos_mejora.append("Mejorar adherencia al protocolo de atenci√≥n est√°ndar")
    if tone_score < 60:
        puntos_mejora.append("Trabajar en tono m√°s amable y emp√°tico")
    if resolution_score < 70:
        puntos_mejora.append("Fortalecer habilidades de resoluci√≥n de problemas")
    if tone_indicators["profesional"] < 2:
        puntos_mejora.append("Usar lenguaje m√°s formal y profesional")
    if not resolution_indicators["seguimiento"]:
        puntos_mejora.append("Implementar seguimiento proactivo a las consultas")

    # 6. SCORE GENERAL
    overall_score = (protocol_score * 0.3 + tone_score * 0.4 + resolution_score * 0.3)

    return {
        "protocol_analysis": protocol_analysis,
        "protocol_score": round(protocol_score, 1),
        "tone_analysis": {
            "primary_tone": primary_tone,
            "indicators": tone_indicators
        },
        "tone_score": round(tone_score, 1),
        "problem_resolution": {
            "resolved": problem_resolved,
            "type": problem_type,
            "follow_up_needed": follow_up_needed,
            "indicators": resolution_indicators
        },
        "resolution_score": round(resolution_score, 1),
        "overall_score": round(overall_score, 1),
        "falencias": falencias,
        "puntos_mejora": puntos_mejora
    }

def count_keywords(text, keywords):
    """Contar ocurrencias de palabras clave en el texto"""
    text_lower = text.lower()
    return sum(text_lower.count(keyword.lower()) for keyword in keywords)

def format_bytes(bytes_size):
    """Formatear tama√±o en bytes a formato legible"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if bytes_size < 1024.0:
            return f"{bytes_size:.1f} {unit}"
        bytes_size /= 1024.0
    return f"{bytes_size:.1f} TB"

def generate_chatgpt_prompt(transcription, analysis, filename, dialogue_text=None, dialogue_stats=None, conversation_analysis=None):
    """Generar prompt optimizado para ChatGPT"""
    perf = analysis.get('performance', {})
    
    prompt = f"""üéØ AN√ÅLISIS DE LLAMADA DE ATENCI√ìN AL CLIENTE

üìÅ ARCHIVO: {filename}
üìÖ FECHA: {datetime.now().strftime('%d/%m/%Y')}

üìä SCORES ACTUALES:
‚Ä¢ Protocolo: {round(perf.get('protocol_score', 0))}%
‚Ä¢ Tono: {round(perf.get('tone_score', 0))}%
‚Ä¢ Resoluci√≥n: {round(perf.get('resolution_score', 0))}%
‚Ä¢ General: {round(perf.get('overall_score', 0))}%

‚úÖ PROTOCOLO CUMPLIDO:"""
    
    protocol_labels = {
        'saludo_inicial': 'Saludo inicial',
        'identificacion': 'Identificaci√≥n',
        'pregunta_ayuda': 'Pregunta de ayuda',
        'despedida': 'Despedida'
    }
    
    for key, value in perf.get('protocol_analysis', {}).items():
        label = protocol_labels.get(key, key)
        status = '‚úì S√ç' if value else '‚úó NO'
        prompt += f"\n‚Ä¢ {label}: {status}"
    
    tone_analysis = perf.get('tone_analysis', {})
    prompt += f"""

üé≠ AN√ÅLISIS DE TONO:
‚Ä¢ Tono principal detectado: {tone_analysis.get('primary_tone', 'No detectado')}"""
    
    for tone, count in tone_analysis.get('indicators', {}).items():
        if count > 0:
            prompt += f"\n‚Ä¢ {tone}: {count} menciones"
    
    problem_resolution = perf.get('problem_resolution', {})
    prompt += f"""

üîß RESOLUCI√ìN DE PROBLEMAS:
‚Ä¢ ¬øProblema resuelto?: {'‚úì S√ç' if problem_resolution.get('resolved', False) else '‚úó NO'}"""
    
    if problem_resolution.get('type'):
        prompt += f"\n‚Ä¢ Tipo de problema: {problem_resolution['type']}"
    if problem_resolution.get('follow_up_needed'):
        prompt += f"\n‚Ä¢ ‚ö†Ô∏è Requiere seguimiento"
    
    falencias = perf.get('falencias', [])
    prompt += f"""

‚ö†Ô∏è FALENCIAS DETECTADAS:"""
    if falencias:
        for falencia in falencias:
            prompt += f"\n‚Ä¢ {falencia}"
    else:
        prompt += f"\n‚Ä¢ No se detectaron falencias cr√≠ticas"
    
    mejoras = perf.get('puntos_mejora', [])
    prompt += f"""

üí° PUNTOS DE MEJORA SUGERIDOS:"""
    if mejoras:
        for mejora in mejoras:
            prompt += f"\n‚Ä¢ {mejora}"
    else:
        prompt += f"\n‚Ä¢ Se requiere an√°lisis m√°s detallado"
    
    # Agregar informaci√≥n de di√°logo si est√° disponible
    if dialogue_stats and dialogue_text:
        prompt += f"""

üé≠ AN√ÅLISIS DE DI√ÅLOGO E INTERLOCUTORES:
‚Ä¢ N√∫mero de interlocutores detectados: {dialogue_stats.get('total_speakers', 'No detectado')}
‚Ä¢ Turnos de conversaci√≥n: {dialogue_stats.get('total_segments', 'No detectado')}"""
        
        # Distribuci√≥n de participaci√≥n
        if 'speaker_distribution' in dialogue_stats:
            prompt += f"\n\nüìä DISTRIBUCI√ìN DE PARTICIPACI√ìN:"
            for speaker, stats in dialogue_stats['speaker_distribution'].items():
                prompt += f"\n‚Ä¢ {speaker}: {stats['percentage']}% ({stats['words']} palabras, {stats['segments']} intervenciones)"
        
        # An√°lisis de din√°micas
        if conversation_analysis:
            prompt += f"\n\nüó£Ô∏è DIN√ÅMICAS DE CONVERSACI√ìN:"
            
            conv_type = conversation_analysis.get('conversation_type', 'Desconocido')
            dominance = conversation_analysis.get('dominance_pattern', 'Desconocido')
            quality = conversation_analysis.get('interaction_quality', 'Desconocido')
            
            prompt += f"\n‚Ä¢ Tipo de conversaci√≥n: {conv_type}"
            prompt += f"\n‚Ä¢ Patr√≥n de dominancia: {dominance}"
            prompt += f"\n‚Ä¢ Calidad de interacci√≥n: {quality}"
            
            recommendations = conversation_analysis.get('recommendations', [])
            if recommendations:
                prompt += f"\n\nüí° RECOMENDACIONES DE DIN√ÅMICAS:"
                for rec in recommendations:
                    prompt += f"\n‚Ä¢ {rec}"
        
        prompt += f"""

üí¨ DI√ÅLOGO FORMATEADO POR INTERLOCUTORES:
{dialogue_text}
"""
    
    prompt += f"""

üìù TRANSCRIPCI√ìN COMPLETA TRADICIONAL:
"{transcription}"

ü§ñ SOLICITUD PARA CHATGPT:
Por favor analiza esta llamada de atenci√≥n al cliente y proporciona:

1. Un an√°lisis m√°s profundo del desempe√±o del asesor
2. Recomendaciones espec√≠ficas para mejorar la atenci√≥n
3. Evaluaci√≥n de la satisfacci√≥n del cliente
4. Sugerencias de entrenamiento o coaching
5. Puntos positivos que el asesor deber√≠a mantener
6. Una calificaci√≥n general del 1-10 con justificaci√≥n"""
    
    # Agregar an√°lisis espec√≠fico si hay informaci√≥n de di√°logo
    if dialogue_text:
        prompt += f"""
7. An√°lisis de las din√°micas de conversaci√≥n entre interlocutores
8. Evaluaci√≥n del equilibrio en la participaci√≥n
9. Recomendaciones sobre el manejo de turnos conversacionales"""
    
    prompt += f"""

Contexto: Somos Movistar y queremos mejorar la calidad de nuestro servicio al cliente."""
    
    return prompt

def generate_excel_report(result, analysis):
    """Generar reporte en formato Excel"""
    # Crear DataFrame con los datos principales
    main_data = {
        'Archivo': [result.get('filename', '')],
        'Fecha de An√°lisis': [datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
        'Palabras': [analysis.get('word_count', 0)],
        'Caracteres': [analysis.get('character_count', 0)],
        'Duraci√≥n Estimada (min)': [analysis.get('estimated_duration', 0)],
    }
    
    # Agregar m√©tricas de performance si existen
    if 'performance' in analysis:
        perf = analysis['performance']
        main_data.update({
            'Score Protocolo (%)': [perf.get('protocol_score', 0)],
            'Score Tono (%)': [perf.get('tone_score', 0)],
            'Score Resoluci√≥n (%)': [perf.get('resolution_score', 0)],
            'Score General (%)': [perf.get('overall_score', 0)]
        })
    
    df_main = pd.DataFrame(main_data)
    
    # Crear DataFrame para palabras clave
    keywords_data = []
    if 'keywords' in analysis:
        for category, count in analysis['keywords'].items():
            keywords_data.append({
                'Categor√≠a': category.replace('_', ' ').title(),
                'Cantidad': count
            })
    
    df_keywords = pd.DataFrame(keywords_data)
    
    # Crear archivo Excel en memoria
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # Hoja principal
        df_main.to_excel(writer, sheet_name='An√°lisis Principal', index=False)
        
        # Hoja de palabras clave
        if not df_keywords.empty:
            df_keywords.to_excel(writer, sheet_name='Palabras Clave', index=False)
        
        # Hoja de transcripci√≥n
        df_transcript = pd.DataFrame({
            'Transcripci√≥n Completa': [result.get('transcription', '')]
        })
        df_transcript.to_excel(writer, sheet_name='Transcripci√≥n', index=False)
    
    output.seek(0)
    return output

def generate_csv_report(result, analysis):
    """Generar reporte en formato CSV"""
    data = {
        'archivo': result.get('filename', ''),
        'fecha_analisis': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'palabras': analysis.get('word_count', 0),
        'caracteres': analysis.get('character_count', 0),
        'duracion_estimada_min': analysis.get('estimated_duration', 0),
        'transcripcion': result.get('transcription', '')
    }
    
    # Agregar m√©tricas de performance
    if 'performance' in analysis:
        perf = analysis['performance']
        data.update({
            'score_protocolo': perf.get('protocol_score', 0),
            'score_tono': perf.get('tone_score', 0),
            'score_resolucion': perf.get('resolution_score', 0),
            'score_general': perf.get('overall_score', 0)
        })
    
    # Agregar palabras clave
    if 'keywords' in analysis:
        for category, count in analysis['keywords'].items():
            data[f'palabras_clave_{category}'] = count
    
    df = pd.DataFrame([data])
    return df.to_csv(index=False)

def create_copy_button(text, button_text, button_id, success_message="‚úÖ Copiado al portapapeles"):
    """Crear un bot√≥n de copiado que no cause rerun de Streamlit"""
    # Escapar el texto para JavaScript m√°s seguro
    text_safe = text.replace('\\', '\\\\').replace('`', '\\`').replace('\n', '\\n').replace('\r', '\\r').replace('"', '\\"').replace("'", "\\'")
    
    # Escapar tambi√©n el mensaje de √©xito
    success_safe = success_message.replace('"', '\\"').replace("'", "\\'")
    
    button_html = f"""
    <div style="margin-bottom: 10px;">
        <button onclick="copyText_{button_id}()" style="
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            width: 100%;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        " 
        onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 8px rgba(0,0,0,0.3)'"
        onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 4px rgba(0,0,0,0.2)'"
        >{button_text}</button>
    </div>
    <script>
    function copyText_{button_id}() {{
        const text = `{text_safe}`;
        if (navigator.clipboard && window.isSecureContext) {{
            navigator.clipboard.writeText(text).then(function() {{
                showSuccessMessage_{button_id}();
            }}, function(err) {{
                fallbackCopy_{button_id}(text);
            }});
        }} else {{
            fallbackCopy_{button_id}(text);
        }}
    }}
    
    function fallbackCopy_{button_id}(text) {{
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {{
            document.execCommand('copy');
            showSuccessMessage_{button_id}();
        }} catch (err) {{
            alert('No se pudo copiar autom√°ticamente. Por favor, copia manualmente del √°rea de texto.');
        }}
        
        document.body.removeChild(textArea);
    }}
    
    function showSuccessMessage_{button_id}() {{
        const notification = document.createElement('div');
        notification.innerHTML = "{success_safe}";
        notification.style.cssText = "position: fixed; top: 20px; right: 20px; background: #4CAF50; color: white; padding: 12px 24px; border-radius: 8px; z-index: 9999; font-family: Arial, sans-serif; font-size: 14px; box-shadow: 0 4px 12px rgba(0,0,0,0.3);";
        document.body.appendChild(notification);
        
        setTimeout(function() {{
            if (notification.parentNode) {{
                notification.parentNode.removeChild(notification);
            }}
        }}, 3000);
    }}
    </script>
    """
    
    return button_html

def generate_word_report(result, analysis):
    """Generar reporte en formato HTML para Word"""
    filename = result.get('filename', 'Audio')
    transcription = result.get('transcription', '')
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>An√°lisis de Audio - {filename}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; }}
            h1 {{ color: #d32f2f; border-bottom: 2px solid #d32f2f; }}
            h2 {{ color: #1976d2; margin-top: 30px; }}
            .metric {{ background: #f5f5f5; padding: 10px; margin: 5px 0; border-radius: 5px; }}
            .transcription {{ background: #fafafa; padding: 20px; border-radius: 5px; font-style: italic; }}
            table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
            th {{ background-color: #f2f2f2; }}
        </style>
    </head>
    <body>
        <h1>üìä An√°lisis de Performance</h1>
        
        <h2>üìÅ Informaci√≥n del Archivo</h2>
        <div class="metric"><strong>Archivo:</strong> {filename}</div>
        <div class="metric"><strong>Fecha de An√°lisis:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</div>
        
        <h2>üìà M√©tricas B√°sicas</h2>
        <div class="metric"><strong>Palabras:</strong> {analysis.get('word_count', 0)}</div>
        <div class="metric"><strong>Caracteres:</strong> {analysis.get('character_count', 0)}</div>
        <div class="metric"><strong>Duraci√≥n Estimada:</strong> {analysis.get('estimated_duration', 0):.1f} minutos</div>
    """
    
    # Agregar m√©tricas de performance si existen
    if 'performance' in analysis:
        perf = analysis['performance']
        html_content += f"""
        <h2>üéØ Scores de Performance</h2>
        <table>
            <tr><th>M√©trica</th><th>Puntuaci√≥n</th></tr>
            <tr><td>Protocolo</td><td>{perf.get('protocol_score', 0):.1f}%</td></tr>
            <tr><td>Tono</td><td>{perf.get('tone_score', 0):.1f}%</td></tr>
            <tr><td>Resoluci√≥n</td><td>{perf.get('resolution_score', 0):.1f}%</td></tr>
            <tr><td><strong>Score General</strong></td><td><strong>{perf.get('overall_score', 0):.1f}%</strong></td></tr>
        </table>
        """
    
    # Agregar palabras clave si existen
    if 'keywords' in analysis:
        html_content += """
        <h2>üîë Palabras Clave Identificadas</h2>
        <table>
            <tr><th>Categor√≠a</th><th>Cantidad</th></tr>
        """
        for category, count in analysis['keywords'].items():
            category_name = category.replace('_', ' ').title()
            html_content += f"<tr><td>{category_name}</td><td>{count}</td></tr>"
        html_content += "</table>"
    
    # Agregar transcripci√≥n
    html_content += f"""
        <h2>üìÑ Transcripci√≥n Completa</h2>
        <div class="transcription">
            {transcription.replace('\n', '<br>')}
        </div>
        
        <hr>
        <p><em>Reporte generado autom√°ticamente por el Sistema de An√°lisis</em></p>
    </body>
    </html>
    """
    
    return html_content

def display_performance_metrics(analysis):
    """Mostrar m√©tricas de performance en formato compacto"""
    if 'performance' not in analysis:
        return
    
    perf = analysis['performance']
    
    # Scores principales en columnas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        score = perf.get('protocol_score', 0)
        st.metric("üîñ Protocolo", f"{score:.1f}%")
    with col2:
        score = perf.get('tone_score', 0)
        st.metric("üé≠ Tono", f"{score:.1f}%")
    with col3:
        score = perf.get('resolution_score', 0)
        st.metric("üîß Resoluci√≥n", f"{score:.1f}%")
    with col4:
        score = perf.get('overall_score', 0)
        st.metric("‚≠ê General", f"{score:.1f}%")

def main():
    # Configuraci√≥n de p√°gina
    st.set_page_config(
        page_title="Transcriptor - An√°lisis de Performance",
        page_icon="üéôÔ∏è",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # CSS personalizado
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(135deg, #ff6b6b, #4ecdc4);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #007bff;
        margin: 0.5rem 0;
    }
    .success-metric {
        border-left-color: #28a745;
    }
    .warning-metric {
        border-left-color: #ffc107;
    }
    .danger-metric {
        border-left-color: #dc3545;
    }
    .stButton > button {
        width: 100%;
    }
    </style>
    """, unsafe_allow_html=True)

    # Encabezado principal
    st.markdown("""
    <div class="main-header">
        <h1>üéôÔ∏è Transcriptor de Audios</h1>
        <p>An√°lisis Avanzado de Performance para Asesores de Atenci√≥n al Cliente</p>
        <div style="text-align: right; margin-top: 10px; font-size: 0.8em; opacity: 0.8;">
            <i>Desarrollado por <strong>Mauro Rementeria</strong> | mauroere@gmail.com</i>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # Sidebar con informaci√≥n
    with st.sidebar:
        st.header("üìä Panel de Control")
        
        # Mostrar informaci√≥n del sistema
        st.subheader("üîß Estado del Sistema")
        
        # Cargar modelo con manejo robusto de errores
        try:
            model = load_whisper_model()
            if model is None:
                st.error("‚ùå Error cr√≠tico: No se pudo cargar el sistema de transcripci√≥n")
                st.warning("üîß Posibles soluciones:")
                st.markdown("- Verifica tu conexi√≥n a internet")
                st.markdown("- Reinicia la aplicaci√≥n")
                st.markdown("- Contacta al desarrollador si el problema persiste")
                st.stop()
            
            # Solo mostrar que el sistema est√° listo
            st.success("‚úÖ Sistema de transcripci√≥n inicializado correctamente")
            
            # Informaci√≥n del sistema para Cloud
            if st.sidebar.checkbox("‚ÑπÔ∏è Info del Sistema", value=False):
                if PSUTIL_AVAILABLE:
                    try:
                        memory_gb = psutil.virtual_memory().available / (1024**3)
                        st.sidebar.info(f"üìä Memoria disponible: {memory_gb:.1f} GB")
                        st.sidebar.info("üîß Modelo optimizado para Cloud")
                    except Exception:
                        st.sidebar.info("üìä Monitor de sistema temporalmente no disponible")
                        st.sidebar.info("üîß Modelo optimizado para Cloud")
                else:
                    st.sidebar.info("üìä Informaci√≥n del sistema no disponible en esta versi√≥n")
                    st.sidebar.info("üîß Modelo optimizado para Cloud")
                
        except Exception as e:
            st.error(f"‚ùå Error inicializando sistema: {e}")
            st.stop()

        st.subheader("üìù Formatos Soportados")
        st.info("WAV, MP3, MP4, AVI, MOV, FLAC, M4A, OGG, WEBM")
        
        st.subheader("üìè L√≠mites")
        st.info("Tama√±o m√°ximo: 100MB por archivo")
        
        st.subheader("‚ú® Mejoras de Transcripci√≥n")
        st.success("""
        **üöÄ Transcripci√≥n Profesional:**
        ‚Ä¢ Optimizaci√≥n autom√°tica de audio
        ‚Ä¢ Correcci√≥n de t√©rminos espec√≠ficos
        ‚Ä¢ Limpieza de s√≠mbolos y ruido
        ‚Ä¢ Capitalizaci√≥n inteligente
        ‚Ä¢ Mayor precisi√≥n en espa√±ol
        """)
        
        # Informaci√≥n sobre detecci√≥n de speakers
        if SPEAKER_DETECTION_AVAILABLE and AUDIO_PROCESSOR == "librosa":
            st.subheader("üé≠ Detecci√≥n de Interlocutores")
            st.success("""
            **üÜï NUEVO: An√°lisis de Di√°logo**
            ‚Ä¢ Detecci√≥n autom√°tica de interlocutores
            ‚Ä¢ Formato de conversaci√≥n con timestamps
            ‚Ä¢ An√°lisis de din√°micas conversacionales
            ‚Ä¢ Distribuci√≥n de participaci√≥n por speaker
            ‚Ä¢ Recomendaciones de mejora de interacci√≥n
            """)
        else:
            st.subheader("ÔøΩ Detecci√≥n de Interlocutores")
            st.warning("""
            **‚ö†Ô∏è Funcionalidad Limitada**
            
            Para habilitar la detecci√≥n de interlocutores, necesitas instalar:
            ```
            pip install scikit-learn
            ```
            
            Esta funci√≥n permite:
            ‚Ä¢ Identificar diferentes voices en el audio
            ‚Ä¢ Formatear como di√°logo con timestamps
            ‚Ä¢ Analizar din√°micas de conversaci√≥n
            """)
        
        st.subheader("ÔøΩüéØ An√°lisis Incluido")
        st.info("""
        ‚Ä¢ **Performance del Asesor**
        ‚Ä¢ **Protocolo de Atenci√≥n**
        ‚Ä¢ **Calidad del Tono**
        ‚Ä¢ **Resoluci√≥n de Problemas**
        ‚Ä¢ **Palabras Clave**
        ‚Ä¢ **Interlocutores y Di√°logo** (si est√° disponible)
        """)
        
        # Cr√©ditos del desarrollador
        st.markdown("---")
        st.markdown("""
        <div style="text-align: center; padding: 15px; background: linear-gradient(135deg, #E10A68, #0066CC); 
                    color: white; border-radius: 8px; margin-top: 20px;">
            <h4 style="margin: 0;">üë®‚Äçüíª Desarrollador</h4>
            <p style="margin: 5px 0; font-size: 0.9em;">
                <strong>Mauro Rementeria</strong><br>
                <a href="mailto:mauroere@gmail.com" style="color: #FFD700; text-decoration: none;">
                    üìß mauroere@gmail.com
                </a>
            </p>
            <p style="font-size: 0.8em; margin: 5px 0; opacity: 0.9;">
                üöÄ Soluciones IA
            </p>
        </div>
        """, unsafe_allow_html=True)

    # √Årea principal
    uploaded_files = st.file_uploader(
        "üéµ Sube uno o varios archivos de audio",
        type=['wav', 'mp3', 'mp4', 'avi', 'mov', 'flac', 'm4a', 'ogg', 'webm'],
        accept_multiple_files=True,
        help="Arrastra y suelta archivos aqu√≠ o haz clic para seleccionar"
    )

    if uploaded_files:
        st.success(f"‚úÖ {len(uploaded_files)} archivo(s) cargado(s)")
        
        # Bot√≥n de procesamiento con estado mejorado
        processing_key = "processing_audio"
        
        # Inicializar estado si no existe
        if processing_key not in st.session_state:
            st.session_state[processing_key] = False
        
        # Determinar si mostrar bot√≥n o estado de procesamiento
        is_processing = st.session_state[processing_key]
        
        if not is_processing:
            # Mostrar bot√≥n solo si no est√° procesando
            process_button = st.button(
                "üöÄ Procesar Archivos",
                type="primary",
                key="process_button",
                help="Iniciar transcripci√≥n y an√°lisis de todos los archivos"
            )
            
            if process_button:
                # Marcar como procesando inmediatamente
                st.session_state[processing_key] = True
                st.rerun()  # Necesario para actualizar el estado del bot√≥n
        else:
            # Mostrar estado de procesamiento en lugar del bot√≥n
            st.info("‚è≥ **Procesando archivos...** Por favor espera a que termine el proceso actual.")
            st.warning("üö´ **No refresques la p√°gina** - El procesamiento est√° en curso")
        
        # Solo ejecutar procesamiento si el estado lo indica
        if st.session_state[processing_key]:
            # Progress bars
            main_progress = st.progress(0)
            status_text = st.empty()
            
            results = []
            total_files = len(uploaded_files)
            
            for i, uploaded_file in enumerate(uploaded_files):
                # Actualizar progreso general
                overall_progress = i / total_files
                main_progress.progress(overall_progress)
                
                # Crear contenedor para progreso detallado
                progress_container = st.container()
                with progress_container:
                    st.markdown(f"### ÔøΩ Procesando: {uploaded_file.name}")
                    file_progress = st.progress(0)
                    file_status = st.empty()
                
                # Paso 1: Preparando archivo
                file_progress.progress(0.1)
                file_status.text("üìã Preparando archivo para procesamiento...")
                
                # Crear archivo temporal de forma m√°s robusta
                file_extension = os.path.splitext(uploaded_file.name)[1]
                if not file_extension:
                    file_extension = '.wav'  # Default extension
                
                try:
                    # Paso 2: Creando archivo temporal
                    file_progress.progress(0.2)
                    file_status.text("üíæ Guardando archivo temporal...")
                    
                    # Crear archivo temporal
                    with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as tmp_file:
                        # Escribir contenido del archivo
                        file_content = uploaded_file.getbuffer()
                        tmp_file.write(file_content)
                        tmp_file.flush()  # Asegurar que se escriba al disco
                        os.fsync(tmp_file.fileno())  # Forzar escritura al disco
                        tmp_path = tmp_file.name
                    
                    # Peque√±a pausa para asegurar que el archivo est√© disponible
                    import time
                    time.sleep(0.1)
                    
                    # Paso 3: Verificando archivo
                    file_progress.progress(0.3)
                    file_status.text("üîç Verificando integridad del archivo...")
                    
                    # Verificar que el archivo se cre√≥ correctamente
                    if not os.path.exists(tmp_path):
                        results.append({
                            "filename": uploaded_file.name,
                            "success": False,
                            "error": "No se pudo crear el archivo temporal"
                        })
                        continue
                    
                    # Verificar tama√±o del archivo
                    file_size = os.path.getsize(tmp_path)
                    if file_size == 0:
                        results.append({
                            "filename": uploaded_file.name,
                            "success": False,
                            "error": "El archivo temporal est√° vac√≠o"
                        })
                        continue
                        
                except Exception as e:
                    results.append({
                        "filename": uploaded_file.name,
                        "success": False,
                        "error": f"Error al crear archivo temporal: {str(e)}"
                    })
                    continue
                
                try:
                    # Paso 4: Validando formato de audio
                    file_progress.progress(0.4)
                    file_status.text("‚úÖ Validando formato de audio...")
                    
                    is_valid, validation_msg = validate_audio_file(tmp_path)
                    
                    if not is_valid:
                        results.append({
                            "filename": uploaded_file.name,
                            "success": False,
                            "error": validation_msg
                        })
                        continue
                    
                    # Paso 5: Iniciando transcripci√≥n mejorada
                    file_progress.progress(0.5)
                    file_status.text("üéôÔ∏è Iniciando transcripci√≥n avanzada...")
                    
                    # Progreso detallado para transcripci√≥n mejorada
                    progress_steps = [
                        (0.55, "üîß Optimizando calidad de audio..."),
                        (0.65, "üß† Procesando con IA avanzada..."),
                        (0.75, "üìù Convirtiendo audio a texto..."),
                        (0.85, "‚ú® Limpiando y profesionalizando texto...")
                    ]
                    
                    for progress_value, message in progress_steps:
                        file_progress.progress(progress_value)
                        file_status.text(message)
                        time.sleep(0.3)  # Pausa para mostrar progreso
                    
                    # Uso de funci√≥n mejorada con detecci√≥n de speakers
                    transcription, dialogue_text, dialogue_stats, conversation_analysis = transcribe_with_speaker_detection(model, tmp_path)
                    
                    if transcription is None:
                        # Error espec√≠fico con sugerencias mejoradas
                        error = dialogue_text  # En caso de error, dialogue_text contiene el mensaje de error
                        st.error(f"‚ùå Error en transcripci√≥n de {uploaded_file.name}")
                        st.markdown(f"**Detalle del error**: {error}")
                        
                        # An√°lisis espec√≠fico del error para dar mejores sugerencias
                        error_lower = error.lower()
                        
                        if "tensor" in error_lower and "size" in error_lower:
                            st.warning("ÔøΩ **Problema de Compatibilidad de Tensor Detectado**")
                            st.info("""
                            üí° **Sugerencias para resolver este error**:
                            ‚Ä¢ Este archivo tiene una estructura que causa conflictos de tensor
                            ‚Ä¢ Intenta convertir el audio a formato WAV con menor calidad
                            ‚Ä¢ Reduce la duraci√≥n del archivo (divide en partes m√°s peque√±as)
                            ‚Ä¢ Usa un software como Audacity para re-exportar el audio
                            """)
                            
                        elif "memory" in error_lower:
                            st.info("""
                            üí° **Problema de Memoria**:
                            ‚Ä¢ El archivo es muy grande para procesar
                            ‚Ä¢ Intenta con archivos m√°s peque√±os (menos de 10 minutos)
                            ‚Ä¢ Divide el audio en segmentos m√°s cortos
                            """)
                            
                        elif "format" in error_lower:
                            st.info("""
                            üí° **Problema de Formato**:
                            ‚Ä¢ El formato de audio no es compatible
                            ‚Ä¢ Convierte a MP3, WAV o M4A
                            ‚Ä¢ Verifica que el archivo no est√© corrupto
                            """)
                            
                        elif "estrategia" in error_lower:
                            st.warning("‚ö†Ô∏è **Error en Todas las Estrategias**")
                            st.info("""
                            üí° **Opciones disponibles**:
                            ‚Ä¢ El archivo puede estar corrupto o tener un formato problem√°tico
                            ‚Ä¢ Intenta re-grabar o re-exportar el audio
                            ‚Ä¢ Usa un formato m√°s est√°ndar como MP3 o WAV
                            ‚Ä¢ Verifica que el audio contenga voz humana claramente audible
                            """)
                        else:
                            st.info("""
                            üí° **Sugerencias generales**:
                            ‚Ä¢ Verifica que el archivo contenga audio v√°lido
                            ‚Ä¢ Intenta con un formato diferente (MP3, WAV, M4A)
                            ‚Ä¢ Aseg√∫rate de que el audio no est√© corrupto
                            ‚Ä¢ Reduce el ruido de fondo si es posible
                            """)
                        
                        results.append({
                            "filename": uploaded_file.name,
                            "success": False,
                            "error": error
                        })
                        continue
                    
                    # Paso 6: Analizando performance
                    file_progress.progress(0.9)
                    file_status.text("üìä Analizando performance del asesor...")
                    
                    analysis = analyze_transcription(transcription)
                    
                    # Paso 7: Finalizando
                    file_progress.progress(1.0)
                    file_status.text("‚úÖ ¬°An√°lisis completado exitosamente!")
                    
                    # Guardar resultado
                    file_id = str(uuid.uuid4())
                    result_data = {
                        "file_id": file_id,
                        "filename": uploaded_file.name,
                        "transcription": transcription,
                        "dialogue_text": dialogue_text,
                        "dialogue_stats": dialogue_stats,
                        "conversation_analysis": conversation_analysis,
                        "analysis": analysis,
                        "timestamp": datetime.now().isoformat()
                    }
                    
                    # Guardar en archivo JSON
                    result_path = os.path.join(TRANSCRIPTIONS_FOLDER, f"{file_id}.json")
                    with open(result_path, 'w', encoding='utf-8') as f:
                        json.dump(result_data, f, ensure_ascii=False, indent=2)
                    
                    results.append({
                        "filename": uploaded_file.name,
                        "success": True,
                        "transcription": transcription,
                        "dialogue_text": dialogue_text,
                        "dialogue_stats": dialogue_stats,
                        "conversation_analysis": conversation_analysis,
                        "analysis": analysis,
                        "file_id": file_id
                    })
                    
                except Exception as e:
                    st.error(f"Error procesando {uploaded_file.name}: {str(e)}")
                    results.append({
                        "filename": uploaded_file.name,
                        "success": False,
                        "error": str(e)
                    })
                
                finally:
                    # Limpiar archivo temporal
                    try:
                        os.unlink(tmp_path)
                    except:
                        pass
            
            # Completar progreso
            main_progress.progress(1.0)
            status_text.text("üéâ ¬°Todos los archivos han sido procesados!")
            
            # Resetear estado de procesamiento
            st.session_state[processing_key] = False
            
            # Limpiar contenedores de progreso individual
            time.sleep(1)  # Breve pausa para que el usuario vea el √©xito
            
            # Mostrar resultados
            st.markdown("---")
            st.header("üìä Resultados del An√°lisis")
            
            # Mensaje de resumen amigable
            total_processed = len(results)
            successful = [r for r in results if r.get('success', False)]
            failed = [r for r in results if not r.get('success', False)]
            
            if len(successful) == total_processed:
                st.success(f"üéâ ¬°Excelente! Todos los {total_processed} archivos fueron procesados exitosamente")
            elif len(successful) > 0:
                st.warning(f"‚ö†Ô∏è Se procesaron {len(successful)} de {total_processed} archivos. {len(failed)} tuvieron errores.")
            else:
                st.error(f"‚ùå No se pudo procesar ning√∫n archivo. Revisa los errores a continuaci√≥n.")
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("‚úÖ Exitosos", len(successful))
            with col2:
                st.metric("‚ùå Errores", len(failed))
            
            # Mostrar errores
            if failed:
                st.subheader("‚ùå Archivos con Errores")
                for result in failed:
                    st.error(f"**{result['filename']}**: {result.get('error', 'Error desconocido')}")
            
            # Mostrar resultados exitosos
            for result in successful:
                display_result(result)

def display_result(result):
    """Mostrar resultado individual"""
    st.markdown("---")
    st.subheader(f"üéµ {result['filename']}")
    
    analysis = result.get('analysis', {})
    dialogue_text = result.get('dialogue_text')
    dialogue_stats = result.get('dialogue_stats')
    conversation_analysis = result.get('conversation_analysis')
    
    # Mostrar m√©tricas de performance si existen
    if 'performance' in analysis:
        display_performance_metrics(analysis)
    
    # Estad√≠sticas b√°sicas
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìù Palabras", analysis.get('word_count', 0))
    with col2:
        st.metric("‚è±Ô∏è Duraci√≥n est.", f"{analysis.get('estimated_duration', 0):.1f} min")
    with col3:
        st.metric("üî§ Caracteres", analysis.get('character_count', 0))
    
    # Mostrar informaci√≥n de di√°logo si est√° disponible
    if dialogue_text and dialogue_stats:
        st.subheader("üé≠ An√°lisis de Interlocutores")
        
        # M√©tricas de conversaci√≥n
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üë• Interlocutores", dialogue_stats.get('total_speakers', 0))
        with col2:
            st.metric("üí¨ Turnos conversaci√≥n", dialogue_stats.get('total_segments', 0))
        with col3:
            # Mostrar tipo de conversaci√≥n si est√° disponible
            conv_type = ""
            if conversation_analysis:
                conv_type = conversation_analysis.get('conversation_type', 'Desconocido')
                if conv_type == 'asesor_explicativo':
                    conv_type = "üéß Asesor Explicativo"
                elif conv_type == 'cliente_consultivo':
                    conv_type = "üë§ Cliente Consultivo"
                elif conv_type == 'colaborativo':
                    conv_type = "ü§ù Colaborativo"
            st.metric("üó£Ô∏è Tipo conversaci√≥n", conv_type)
        
        # Distribuci√≥n de participaci√≥n
        if 'speaker_distribution' in dialogue_stats:
            st.subheader("üìä Distribuci√≥n de Participaci√≥n")
            
            speaker_dist = dialogue_stats['speaker_distribution']
            
            # Crear gr√°fico de barras simple con texto
            for speaker, stats in speaker_dist.items():
                percentage = stats['percentage']
                words = stats['words']
                
                # Crear barra visual simple
                bar_length = int(percentage / 2)  # Escala a 50 caracteres max
                bar = "‚ñà" * bar_length + "‚ñë" * (50 - bar_length)
                
                st.markdown(f"""
                **{speaker}**: {percentage}% ({words} palabras)
                ```
                {bar} {percentage}%
                ```
                """)
        
        # An√°lisis de din√°micas si est√° disponible
        if conversation_analysis and 'recommendations' in conversation_analysis:
            recommendations = conversation_analysis['recommendations']
            if recommendations:
                st.subheader("üí° Recomendaciones de Din√°micas")
                for rec in recommendations:
                    st.warning(f"‚ö†Ô∏è {rec}")
        
        # Mostrar di√°logo formateado en pesta√±a separada
        st.subheader("üí¨ Di√°logo por Interlocutores")
        
        # Pesta√±as para di√°logo y transcripci√≥n normal
        tab1, tab2 = st.tabs(["üé≠ Formato Di√°logo", "üìÑ Transcripci√≥n Normal"])
        
        with tab1:
            st.text_area(
                "Conversaci√≥n con timestamps e interlocutores identificados:",
                value=dialogue_text,
                height=200,
                key=f"dialogue_{result.get('file_id', 'unknown')}"
            )
            
            # Bot√≥n para copiar di√°logo
            file_id = result.get('file_id', 'unknown').replace('-', '_')
            dialogue_copy_button = create_copy_button(
                text=dialogue_text,
                button_text="üìã Copiar Di√°logo",
                button_id=f"dialogue_{file_id}",
                success_message="‚úÖ Di√°logo copiado al portapapeles"
            )
            st.markdown(dialogue_copy_button, unsafe_allow_html=True)
        
        with tab2:
            st.text_area(
                "Transcripci√≥n tradicional:",
                value=result.get('transcription', ''),
                height=200,
                key=f"transcript_normal_{result.get('file_id', 'unknown')}"
            )
            
            # Bot√≥n para copiar transcripci√≥n normal
            transcript_copy_button = create_copy_button(
                text=result.get('transcription', ''),
                button_text="üìã Copiar Transcripci√≥n",
                button_id=f"transcript_{file_id}",
                success_message="‚úÖ Transcripci√≥n copiada al portapapeles"
            )
            st.markdown(transcript_copy_button, unsafe_allow_html=True)
    
    else:
        # Si no hay di√°logo, mostrar transcripci√≥n normal
        st.subheader("üìÑ Transcripci√≥n")
        st.text_area(
            "Contenido:",
            value=result.get('transcription', ''),
            height=150,
            key=f"transcript_{result.get('file_id', 'unknown')}"
        )
        
        # Bot√≥n de copiado para transcripci√≥n normal
        transcript_text = result.get('transcription', '')
        file_id = result.get('file_id', 'unknown').replace('-', '_')
        copy_button_html = create_copy_button(
            text=transcript_text,
            button_text="üìã Copiar Transcripci√≥n",
            button_id=f"transcript_{file_id}",
            success_message="‚úÖ Transcripci√≥n copiada al portapapeles"
        )
        st.markdown(copy_button_html, unsafe_allow_html=True)
    
    # Botones de acci√≥n
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        # Espacio ya usado para copy button arriba
        pass
    
    with col2:
        # Usar expander en lugar de session state para evitar reruns
        with st.expander("ü§ñ ANALIZAR CON IA"):
            prompt = generate_chatgpt_prompt(
                result.get('transcription', ''),
                result.get('analysis', {}),
                result.get('filename', ''),
                result.get('dialogue_text'),
                result.get('dialogue_stats'),
                result.get('conversation_analysis')
            )
            
            # Bot√≥n de copiar para el prompt usando la nueva funci√≥n
            file_id = result.get('file_id', 'unknown').replace('-', '_')
            copy_prompt_html = create_copy_button(
                text=prompt,
                button_text="üìã Copiar Prompt para IA",
                button_id=f"prompt_{file_id}",
                success_message="‚úÖ Prompt copiado. ¬°P√©galo en ChatGPT!"
            )
            st.markdown(copy_prompt_html, unsafe_allow_html=True)
            
            st.info("üìã Usa el bot√≥n de arriba para copiar autom√°ticamente, o selecciona el texto manualmente:")
            st.text_area(
                "Prompt:", 
                value=prompt, 
                height=300, 
                key=f"prompt_{result.get('file_id', 'unknown')}",
                help="Selecciona todo (Ctrl+A) y copia (Ctrl+C)"
            )
            
            col_a, col_b = st.columns(2)
            with col_a:
                st.link_button("üîó Abrir ChatGPT", "https://chat.openai.com")
            with col_b:
                st.link_button("üîó Abrir Claude", "https://claude.ai")
    
    with col3:
        # Descargar an√°lisis en m√∫ltiples formatos
        st.subheader("üìä Descargar An√°lisis")
        
        file_base_name = result.get('filename', 'archivo').split('.')[0]
        
        # Excel
        excel_data = generate_excel_report(result, analysis)
        st.download_button(
            label="üìà Excel (.xlsx)",
            data=excel_data,
            file_name=f"analisis_{file_base_name}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key=f"download_excel_{result.get('file_id', 'unknown')}"
        )
        
        # CSV
        csv_data = generate_csv_report(result, analysis)
        st.download_button(
            label="üìã CSV (.csv)",
            data=csv_data,
            file_name=f"analisis_{file_base_name}.csv",
            mime="text/csv",
            key=f"download_csv_{result.get('file_id', 'unknown')}"
        )
    
    with col4:
        st.subheader("üìÑ Descargar Completo")
        
        # Word/HTML
        word_data = generate_word_report(result, analysis)
        st.download_button(
            label="ÔøΩ Word (.html)",
            data=word_data,
            file_name=f"reporte_{file_base_name}.html",
            mime="text/html",
            key=f"download_word_{result.get('file_id', 'unknown')}"
        )
        
        # JSON (mantener opci√≥n original)
        report_data = {
            'archivo': result.get('filename', ''),
            'fecha_analisis': datetime.now().isoformat(),
            'transcripcion': result.get('transcription', ''),
            'analisis_performance': analysis.get('performance', {}),
            'metricas_basicas': {
                'palabras': analysis.get('word_count', 0),
                'caracteres': analysis.get('character_count', 0),
                'duracion_estimada': analysis.get('estimated_duration', 0)
            }
        }
        
        st.download_button(
            label="ÔøΩ JSON (.json)",
            data=json.dumps(report_data, ensure_ascii=False, indent=2),
            file_name=f"datos_{file_base_name}.json",
            mime="application/json",
            key=f"download_json_{result.get('file_id', 'unknown')}"
        )

def process_files(uploaded_files, model):
    """Procesar archivos de audio"""
    
    # Progress bars
    main_progress = st.progress(0)
    status_text = st.empty()
    
    results = []
    total_files = len(uploaded_files)
    
    for i, uploaded_file in enumerate(uploaded_files):
        # Actualizar progreso
        progress = i / total_files
        main_progress.progress(progress)
        status_text.text(f"üìÅ Procesando {uploaded_file.name} ({i+1}/{total_files})")
        
        # Crear archivo temporal
        with tempfile.NamedTemporaryFile(delete=False, suffix=Path(uploaded_file.name).suffix) as tmp_file:
            tmp_file.write(uploaded_file.getbuffer())
            tmp_path = tmp_file.name
        
        try:
            # Validar archivo
            is_valid, validation_msg = validate_audio_file(tmp_path)
            
            if not is_valid:
                results.append({
                    "filename": uploaded_file.name,
                    "success": False,
                    "error": validation_msg
                })
                continue
            
            # Transcribir
            status_text.text(f"üéôÔ∏è Transcribiendo {uploaded_file.name}...")
            transcription, error = transcribe_with_fallback(model, tmp_path)
            
            if error:
                results.append({
                    "filename": uploaded_file.name,
                    "success": False,
                    "error": error
                })
                continue
            
            # Analizar
            status_text.text(f"üìä Analizando {uploaded_file.name}...")
            analysis = analyze_transcription(transcription)
            
            # Guardar resultado
            file_id = str(uuid.uuid4())
            result_data = {
                "file_id": file_id,
                "filename": uploaded_file.name,
                "transcription": transcription,
                "analysis": analysis,
                "timestamp": datetime.now().isoformat()
            }
            
            # Guardar en archivo JSON
            result_path = os.path.join(TRANSCRIPTIONS_FOLDER, f"{file_id}.json")
            with open(result_path, 'w', encoding='utf-8') as f:
                json.dump(result_data, f, ensure_ascii=False, indent=2)
            
            results.append({
                "filename": uploaded_file.name,
                "success": True,
                "transcription": transcription,
                "analysis": analysis,
                "file_id": file_id
            })
            
        except Exception as e:
            results.append({
                "filename": uploaded_file.name,
                "success": False,
                "error": f"Error inesperado: {str(e)}"
            })
        
        finally:
            # Limpiar archivo temporal
            try:
                os.unlink(tmp_path)
            except:
                pass
    
    # Completar progreso
    main_progress.progress(1.0)
    status_text.text("‚úÖ ¬°Procesamiento completado!")
    
    # Mostrar resultados
    display_results(results)

def display_results(results):
    """Mostrar resultados del procesamiento"""
    
    st.markdown("---")
    st.header("üìã Resultados del An√°lisis")
    
    # Estad√≠sticas generales
    successful = len([r for r in results if r["success"]])
    failed = len(results) - successful
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üìä Total Procesados", len(results))
    with col2:
        st.metric("‚úÖ Exitosos", successful)
    with col3:
        st.metric("‚ùå Fallidos", failed)
    
    # Mostrar cada resultado
    for result in results:
        if result["success"]:
            display_successful_result(result)
        else:
            display_error_result(result)

def display_successful_result(result):
    """Mostrar resultado exitoso"""
    analysis = result["analysis"]
    perf = analysis.get("performance", {})
    
    with st.expander(f"üìÅ {result['filename']} - Score: {round(perf.get('overall_score', 0))}%", expanded=True):
        
        # M√©tricas de performance
        st.subheader("üìä Evaluaci√≥n de Performance")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            score = perf.get('protocol_score', 0)
            color = "success" if score >= 80 else "warning" if score >= 60 else "danger"
            st.metric("üîñ Protocolo", f"{round(score)}%")
            
        with col2:
            score = perf.get('tone_score', 0)
            color = "success" if score >= 80 else "warning" if score >= 60 else "danger"
            st.metric("üé≠ Tono", f"{round(score)}%")
            
        with col3:
            score = perf.get('resolution_score', 0)
            color = "success" if score >= 80 else "warning" if score >= 60 else "danger"
            st.metric("üîß Resoluci√≥n", f"{round(score)}%")
            
        with col4:
            score = perf.get('overall_score', 0)
            color = "success" if score >= 80 else "warning" if score >= 60 else "danger"
            st.metric("‚≠ê General", f"{round(score)}%")
        
        # An√°lisis detallado en pesta√±as
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìã Protocolo", "üé≠ Tono", "üîß Resoluci√≥n", "‚ö†Ô∏è Falencias", "üìù Transcripci√≥n"
        ])
        
        with tab1:
            st.subheader("‚úÖ Cumplimiento de Protocolo")
            protocol = perf.get('protocol_analysis', {})
            protocol_labels = {
                'saludo_inicial': 'Saludo inicial',
                'identificacion': 'Identificaci√≥n del cliente',
                'pregunta_ayuda': 'Pregunta sobre necesidades',
                'despedida': 'Despedida apropiada'
            }
            
            for key, value in protocol.items():
                label = protocol_labels.get(key, key)
                if value:
                    st.success(f"‚úÖ {label}")
                else:
                    st.error(f"‚ùå {label}")
        
        with tab2:
            st.subheader("üé≠ An√°lisis de Tono")
            tone_analysis = perf.get('tone_analysis', {})
            
            primary_tone = tone_analysis.get('primary_tone', 'No detectado')
            tone_icons = {
                'amable': 'üòä', 'empatico': '‚ù§Ô∏è', 'profesional': 'üíº',
                'cortado': 'üòê', 'frustrado': 'üò§', 'agresivo': 'üò†', 'neutral': 'üò∂'
            }
            icon = tone_icons.get(primary_tone, 'ü§î')
            
            st.info(f"{icon} **Tono principal:** {primary_tone}")
            
            indicators = tone_analysis.get('indicators', {})
            if indicators:
                st.subheader("üìà Indicadores por tipo:")
                for tone, count in indicators.items():
                    if count > 0:
                        st.write(f"‚Ä¢ **{tone.title()}:** {count} menciones")
        
        with tab3:
            st.subheader("üîß Resoluci√≥n de Problemas")
            resolution = perf.get('problem_resolution', {})
            
            if resolution.get('resolved', False):
                st.success("‚úÖ Problema resuelto")
            else:
                st.error("‚ùå Problema no resuelto")
            
            if resolution.get('type'):
                st.info(f"üìã **Tipo:** {resolution['type']}")
            
            if resolution.get('follow_up_needed'):
                st.warning("‚ö†Ô∏è Requiere seguimiento")
        
        with tab4:
            st.subheader("‚ö†Ô∏è Falencias Detectadas")
            falencias = perf.get('falencias', [])
            mejoras = perf.get('puntos_mejora', [])
            
            if falencias:
                st.error("**Falencias encontradas:**")
                for falencia in falencias:
                    st.write(f"‚Ä¢ {falencia}")
            else:
                st.success("‚úÖ No se detectaron falencias cr√≠ticas")
            
            if mejoras:
                st.info("**Puntos de mejora sugeridos:**")
                for mejora in mejoras:
                    st.write(f"‚Ä¢ {mejora}")
        
        with tab5:
            st.subheader("üìù Transcripci√≥n Completa")
            st.text_area("Texto transcrito:", result["transcription"], height=200, disabled=True)
            
            # Estad√≠sticas b√°sicas
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìù Palabras", analysis["word_count"])
            with col2:
                st.metric("‚è±Ô∏è Duraci√≥n estimada", f"{analysis['estimated_duration']:.1f} min")
            with col3:
                st.metric("üî§ Caracteres", analysis["character_count"])
        
        # Botones de acci√≥n
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button(f"üìã Copiar Transcripci√≥n", key=f"copy_{result['file_id']}"):
                st.code(result["transcription"])
                st.success("‚úÖ Transcripci√≥n mostrada arriba para copiar")
        
        with col2:
            # Usar expander tambi√©n aqu√≠ para evitar reruns
            with st.expander("ü§ñ Generar Prompt ChatGPT"):
                chatgpt_prompt = generate_chatgpt_prompt(
                    result["transcription"], 
                    analysis, 
                    result["filename"],
                    result.get("dialogue_text"),
                    result.get("dialogue_stats"),
                    result.get("conversation_analysis")
                )
                
                # Bot√≥n de copiar espec√≠fico para el prompt
                if st.button("üìã Copiar Prompt", key=f"copy_prompt2_{result['file_id']}"):
                    st.code(chatgpt_prompt, language=None)
                    st.success("‚úÖ Prompt mostrado arriba. Selecciona todo (Ctrl+A) y copia (Ctrl+C)")
                
                st.info("üìã Copia este texto y p√©galo en ChatGPT:")
                st.text_area(
                    "Prompt optimizado:",
                    chatgpt_prompt,
                    height=300,
                    key=f"prompt2_{result['file_id']}",
                    help="Selecciona todo (Ctrl+A) y copia (Ctrl+C)"
                )
                
                # Enlaces directos
                col_a, col_b = st.columns(2)
                with col_a:
                    st.link_button("üîó Abrir ChatGPT", "https://chat.openai.com")
                with col_b:
                    st.link_button("üîó Abrir Claude", "https://claude.ai")
        
        with col3:
            # M√∫ltiples opciones de descarga
            st.subheader("üìä Descargar Reporte")
            
            file_base_name = result["filename"].split('.')[0]
            
            # Excel
            excel_data = generate_excel_report(result, analysis)
            st.download_button(
                "üìà Descargar Excel",
                excel_data,
                file_name=f"analisis_{file_base_name}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key=f"download_excel2_{result['file_id']}"
            )
            
            # CSV
            csv_data = generate_csv_report(result, analysis)
            st.download_button(
                "ÔøΩ Descargar CSV",
                csv_data,
                file_name=f"analisis_{file_base_name}.csv",
                mime="text/csv",
                key=f"download_csv2_{result['file_id']}"
            )
            
            # Word/HTML
            word_data = generate_word_report(result, analysis)
            st.download_button(
                "üìù Descargar Word",
                word_data,
                file_name=f"reporte_{file_base_name}.html",
                mime="text/html",
                key=f"download_word2_{result['file_id']}"
            )
            
            # JSON (para desarrolladores)
            report = {
                "archivo": result["filename"],
                "fecha_analisis": datetime.now().isoformat(),
                "transcripcion": result["transcription"],
                "analisis_performance": perf,
                "metricas_basicas": {
                    "palabras": analysis["word_count"],
                    "caracteres": analysis["character_count"],
                    "duracion_estimada": analysis["estimated_duration"]
                },
                "resumen_ejecutivo": {
                    "score_general": perf.get('overall_score', 0),
                    "protocolo_cumplido": perf.get('protocol_score', 0),
                    "calidad_tono": perf.get('tone_score', 0),
                    "resolucion_efectiva": perf.get('resolution_score', 0),
                    "problema_resuelto": perf.get('problem_resolution', {}).get('resolved', False)
                }
            }
            
            json_str = json.dumps(report, ensure_ascii=False, indent=2)
            st.download_button(
                "ÔøΩ Descargar JSON",
                json_str,
                file_name=f"datos_{file_base_name}.json",
                mime="application/json",
                key=f"download_json2_{result['file_id']}"
            )

def display_error_result(result):
    """Mostrar resultado con error"""
    with st.expander(f"‚ùå {result['filename']} - Error", expanded=False):
        st.error(f"**Error:** {result['error']}")
        st.info("üí° **Sugerencias:**\n- Verifica que el archivo no est√© corrupto\n- Aseg√∫rate de que el formato sea compatible\n- Intenta con un archivo m√°s peque√±o")

if __name__ == "__main__":
    main()
    
    # Footer profesional con cr√©ditos del desarrollador
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #E10A68, #0066CC); 
                color: white; border-radius: 10px; margin-top: 30px;">
        <h3>üöÄ Transcriptor de Audios</h3>
        <p style="margin: 10px 0;">
            <strong>Desarrollado por:</strong> Mauro Rementeria<br>
            <strong>Email:</strong> <a href="mailto:mauroere@gmail.com" style="color: #FFD700;">mauroere@gmail.com</a><br>
            <strong>Tecnolog√≠as:</strong> Python | Streamlit | OpenAI Whisper | IA
        </p>
        <p style="font-size: 0.9em; opacity: 0.9; margin-top: 15px;">
            ‚ö° Transcripci√≥n profesional con an√°lisis de performance | 
            üéØ Optimizado para atenci√≥n al cliente | 
            üìä Insights automatizados
        </p>
        <p style="font-size: 0.8em; margin-top: 10px;">
            ¬© 2025 - Todos los derechos reservados
        </p>
    </div>
    """, unsafe_allow_html=True)
