#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Diagn√≥stico Espec√≠fico para Errores de Tensor
=======================================================
Este script diagn√≥stica el archivo espec√≠fico que est√° causando errores.

Para usar: python diagnose_tensor_error.py "Ramallo leonardo 20-8 16.05hs.wav"

Desarrollado por: Mauro Rementeria - mauroere@gmail.com
"""

import os
import sys
import warnings
warnings.filterwarnings("ignore")

def analyze_problematic_file(file_path):
    """Analizar espec√≠ficamente el archivo que causa errores de tensor"""
    print(f"üîç AN√ÅLISIS ESPEC√çFICO: {os.path.basename(file_path)}")
    print("=" * 60)
    
    if not os.path.exists(file_path):
        print(f"‚ùå Archivo no encontrado: {file_path}")
        return False
    
    # Informaci√≥n b√°sica
    file_size = os.path.getsize(file_path)
    print(f"üìè Tama√±o: {file_size / 1024 / 1024:.2f} MB")
    
    # An√°lisis detallado con librosa
    try:
        import librosa
        import soundfile as sf
        import numpy as np
        
        print("\nüìä AN√ÅLISIS CON LIBROSA:")
        print("-" * 30)
        
        # Metadatos del archivo
        info = sf.info(file_path)
        print(f"üìã Metadatos:")
        print(f"   ‚Ä¢ Formato: {info.format} ({info.subtype})")
        print(f"   ‚Ä¢ Canales: {info.channels}")
        print(f"   ‚Ä¢ Sample Rate: {info.samplerate} Hz")
        print(f"   ‚Ä¢ Duraci√≥n: {info.duration:.2f} segundos ({info.duration/60:.1f} minutos)")
        print(f"   ‚Ä¢ Frames totales: {info.frames:,}")
        
        # Problemas potenciales identificados
        problems = []
        if info.channels > 2:
            problems.append(f"Demasiados canales ({info.channels})")
        if info.samplerate > 48000:
            problems.append(f"Sample rate muy alto ({info.samplerate} Hz)")
        if info.duration > 1200:  # 20 minutos
            problems.append(f"Archivo muy largo ({info.duration/60:.1f} minutos)")
        if info.frames > 50000000:  # 50M frames
            problems.append(f"Demasiados frames ({info.frames:,})")
            
        if problems:
            print("\n‚ö†Ô∏è PROBLEMAS POTENCIALES DETECTADOS:")
            for problem in problems:
                print(f"   ‚Ä¢ {problem}")
        
        # Cargar muestra para an√°lisis
        print(f"\nüß™ CARGANDO MUESTRA DE AUDIO (10 segundos):")
        try:
            y, sr = librosa.load(file_path, sr=None, duration=10.0, mono=False)
            
            if y.ndim == 1:
                print(f"   ‚Ä¢ Audio mono cargado")
                y_analysis = y
            else:
                print(f"   ‚Ä¢ Audio est√©reo cargado, shape: {y.shape}")
                y_analysis = librosa.to_mono(y)
            
            print(f"   ‚Ä¢ Shape final: {y_analysis.shape}")
            print(f"   ‚Ä¢ Dtype: {y_analysis.dtype}")
            print(f"   ‚Ä¢ Rango: [{y_analysis.min():.6f}, {y_analysis.max():.6f}]")
            print(f"   ‚Ä¢ RMS promedio: {np.sqrt(np.mean(y_analysis**2)):.6f}")
            
            # Detectar problemas en el audio
            if np.abs(y_analysis).max() < 0.001:
                problems.append("Audio muy silencioso")
            if np.isnan(y_analysis).any():
                problems.append("Contiene valores NaN")
            if np.isinf(y_analysis).any():
                problems.append("Contiene valores infinitos")
                
        except Exception as e:
            print(f"   ‚ùå Error al cargar muestra: {e}")
            problems.append(f"Error de carga: {e}")
            
    except ImportError:
        print("‚ö†Ô∏è Librosa no disponible para an√°lisis detallado")
    
    # Pruebas espec√≠ficas con Whisper
    print(f"\nü§ñ PRUEBAS CON WHISPER:")
    print("-" * 30)
    
    try:
        import whisper
        
        # Cargar modelo tiny para pruebas r√°pidas
        print("üîÑ Cargando modelo Whisper (tiny)...")
        model = whisper.load_model("tiny")
        print("‚úÖ Modelo cargado")
        
        # Configuraciones espec√≠ficas para errores de tensor
        test_configs = [
            {"name": "Configuraci√≥n Vac√≠a", "config": {}},
            {"name": "Solo Idioma", "config": {"language": "es"}},
            {"name": "Sin FP16", "config": {"language": "es", "fp16": False}},
            {"name": "Temperatura 0", "config": {"language": "es", "temperature": 0.0, "fp16": False}},
            {"name": "Sin Beam Search", "config": {"language": "es", "beam_size": 1, "fp16": False}},
            {"name": "Task Expl√≠cita", "config": {"language": "es", "task": "transcribe", "fp16": False}},
        ]
        
        print(f"\nüß™ PROBANDO {len(test_configs)} CONFIGURACIONES:")
        
        results = []
        tensor_error_count = 0
        
        for i, test in enumerate(test_configs, 1):
            print(f"\n   {i}. {test['name']}:")
            try:
                # Intentar transcripci√≥n
                result = model.transcribe(file_path, **test['config'])
                text = result.get("text", "").strip()
                
                if text:
                    print(f"      ‚úÖ √âXITO: '{text[:40]}...'")
                    results.append({"config": test['name'], "status": "success", "text": text[:50]})
                else:
                    print(f"      ‚ö†Ô∏è Sin texto generado")
                    results.append({"config": test['name'], "status": "empty", "text": ""})
                    
            except Exception as e:
                error_msg = str(e)
                print(f"      ‚ùå ERROR: {error_msg[:60]}...")
                
                if "tensor" in error_msg.lower() and "size" in error_msg.lower():
                    print(f"      üî• ERROR DE TENSOR CONFIRMADO")
                    tensor_error_count += 1
                    results.append({"config": test['name'], "status": "tensor_error", "error": error_msg})
                else:
                    results.append({"config": test['name'], "status": "other_error", "error": error_msg})
        
        # Resumen de resultados
        print(f"\nüìä RESUMEN DE PRUEBAS:")
        print(f"   ‚Ä¢ Configuraciones exitosas: {len([r for r in results if r['status'] == 'success'])}")
        print(f"   ‚Ä¢ Errores de tensor: {tensor_error_count}")
        print(f"   ‚Ä¢ Otros errores: {len([r for r in results if r['status'] == 'other_error'])}")
        print(f"   ‚Ä¢ Sin texto: {len([r for r in results if r['status'] == 'empty'])}")
        
        if tensor_error_count > 0:
            print(f"\nüö® CONFIRMADO: ARCHIVO CON PROBLEMAS DE TENSOR")
            return False
        elif len([r for r in results if r['status'] == 'success']) > 0:
            print(f"\n‚úÖ El archivo funciona con algunas configuraciones")
            return True
        else:
            print(f"\n‚ùå El archivo no funciona con ninguna configuraci√≥n")
            return False
            
    except Exception as e:
        print(f"‚ùå Error cr√≠tico con Whisper: {e}")
        return False

def generate_fix_commands(file_path):
    """Generar comandos espec√≠ficos para arreglar el archivo"""
    print(f"\nüõ†Ô∏è COMANDOS PARA ARREGLAR EL ARCHIVO:")
    print("=" * 40)
    
    base_name = os.path.splitext(os.path.basename(file_path))[0]
    output_name = f"{base_name}_fixed.wav"
    
    print(f"üí° Ejecuta CUALQUIERA de estos comandos para arreglar el archivo:")
    print()
    
    print(f"1Ô∏è‚É£ CONVERSI√ìN B√ÅSICA (Recomendado):")
    print(f"   ffmpeg -i \"{file_path}\" -ar 16000 -ac 1 -c:a pcm_s16le \"{output_name}\"")
    print()
    
    print(f"2Ô∏è‚É£ CONVERSI√ìN + LIMPIEZA:")
    print(f"   ffmpeg -i \"{file_path}\" -ar 16000 -ac 1 -af \"highpass=f=80\" \"{output_name}\"")
    print()
    
    print(f"3Ô∏è‚É£ DIVISI√ìN EN SEGMENTOS (si es muy largo):")
    print(f"   ffmpeg -i \"{file_path}\" -f segment -segment_time 300 -ar 16000 -ac 1 \"{base_name}_part%03d.wav\"")
    print()
    
    print(f"4Ô∏è‚É£ CONVERSI√ìN A MP3 (alternativa):")
    print(f"   ffmpeg -i \"{file_path}\" -ar 22050 -ac 1 -b:a 64k \"{base_name}_fixed.mp3\"")
    print()
    
    print("üìã DESPU√âS DE CONVERTIR:")
    print("   ‚Ä¢ Usa el archivo convertido en la aplicaci√≥n")
    print("   ‚Ä¢ Deber√≠a procesar sin errores de tensor")
    print("   ‚Ä¢ Si sigue fallando, intenta con los segmentos divididos")

def main():
    """Funci√≥n principal"""
    print("üîç DIAGN√ìSTICO ESPEC√çFICO DE ERRORES DE TENSOR")
    print("=" * 50)
    print("Desarrollado por: Mauro Rementeria - mauroere@gmail.com")
    print()
    
    # Verificar argumentos
    if len(sys.argv) != 2:
        print("‚ùå Uso incorrecto")
        print("üí° Arrastra el archivo al script o usa:")
        print("   python diagnose_tensor_error.py \"nombre_archivo.wav\"")
        print()
        print("üìÅ Para el archivo espec√≠fico que tienes:")
        print("   python diagnose_tensor_error.py \"Ramallo leonardo 20-8 16.05hs.wav\"")
        return
    
    file_path = sys.argv[1]
    
    # Verificar que existe
    if not os.path.exists(file_path):
        print(f"‚ùå Archivo no encontrado: {file_path}")
        print()
        
        # Buscar archivos similares
        directory = os.path.dirname(file_path) if os.path.dirname(file_path) else "."
        print(f"üîç Archivos de audio en {directory}:")
        try:
            files = [f for f in os.listdir(directory) if f.lower().endswith(('.wav', '.mp3', '.m4a', '.flac'))]
            for f in files:
                print(f"   üìÑ {f}")
        except:
            print("   No se pudieron listar archivos")
        return
    
    # Ejecutar an√°lisis
    print(f"üéØ Analizando archivo espec√≠fico que causa errores...")
    print()
    
    success = analyze_problematic_file(file_path)
    
    # Siempre mostrar comandos de arreglo
    generate_fix_commands(file_path)
    
    # Conclusi√≥n
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ CONCLUSI√ìN: El archivo puede funcionar con configuraciones espec√≠ficas")
        print("üí° Intenta procesar de nuevo en la aplicaci√≥n")
    else:
        print("üö® CONCLUSI√ìN: El archivo necesita ser convertido antes de usar")
        print("üí° Ejecuta uno de los comandos de arriba para arreglarlo")
    print("=" * 60)

if __name__ == "__main__":
    main()
